module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "CompilationUnit": parse_CompilationUnit,
        "upper": parse_upper,
        "lower": parse_lower,
        "letter": parse_letter,
        "digit": parse_digit,
        "opchar": parse_opchar,
        "op": parse_op,
        "varid": parse_varid,
        "plainid": parse_plainid,
        "id": parse_id,
        "idrest": parse_idrest,
        "integerLiteral": parse_integerLiteral,
        "decimalNumeral": parse_decimalNumeral,
        "hexNumeral": parse_hexNumeral,
        "octalNumeral": parse_octalNumeral,
        "nonZeroDigit": parse_nonZeroDigit,
        "octalDigit": parse_octalDigit,
        "floatingPointLiteral": parse_floatingPointLiteral,
        "exponentPart": parse_exponentPart,
        "floatType": parse_floatType,
        "booleanLiteral": parse_booleanLiteral,
        "characterLiteral": parse_characterLiteral,
        "stringLiteral": parse_stringLiteral,
        "stringElement": parse_stringElement,
        "multiLineChars": parse_multiLineChars,
        "multiLineCharsElements": parse_multiLineCharsElements,
        "symbolLiteral": parse_symbolLiteral,
        "comment": parse_comment,
        "singleLineComment": parse_singleLineComment,
        "multiLineComment": parse_multiLineComment,
        "__": parse___,
        "nl": parse_nl,
        "semi": parse_semi,
        "whitespace": parse_whitespace,
        "Literal": parse_Literal,
        "QualId": parse_QualId,
        "ids": parse_ids,
        "Path": parse_Path,
        "StableId": parse_StableId,
        "ClassQualifier": parse_ClassQualifier,
        "Type": parse_Type,
        "FunctionArgTypes": parse_FunctionArgTypes,
        "ExistentialClause": parse_ExistentialClause,
        "ExistentialDcl": parse_ExistentialDcl,
        "InfixType": parse_InfixType,
        "CompoundType": parse_CompoundType,
        "AnnotType": parse_AnnotType,
        "SimpleType": parse_SimpleType,
        "withId": parse_withId,
        "TypeArgs": parse_TypeArgs,
        "Types": parse_Types,
        "Refinement": parse_Refinement,
        "RefineStat": parse_RefineStat,
        "Ascription": parse_Ascription,
        "Expr": parse_Expr,
        "Expr1": parse_Expr1,
        "PostfixExpr": parse_PostfixExpr,
        "InfixExpr": parse_InfixExpr,
        "PrefixExpr": parse_PrefixExpr,
        "SimpleExpr": parse_SimpleExpr,
        "SimpleExpr1": parse_SimpleExpr1,
        "_SimpleExpr1": parse__SimpleExpr1,
        "Exprs": parse_Exprs,
        "ArgumentExprs": parse_ArgumentExprs,
        "BlockExpr": parse_BlockExpr,
        "Block": parse_Block,
        "BlockStat": parse_BlockStat,
        "ResultExpr": parse_ResultExpr,
        "Enumerators": parse_Enumerators,
        "Enumerator": parse_Enumerator,
        "Generator": parse_Generator,
        "CaseClauses": parse_CaseClauses,
        "CaseClause": parse_CaseClause,
        "Guard": parse_Guard,
        "Pattern": parse_Pattern,
        "Pattern1": parse_Pattern1,
        "Pattern2": parse_Pattern2,
        "Pattern3": parse_Pattern3,
        "SimplePattern": parse_SimplePattern,
        "Patterns": parse_Patterns,
        "TypeParamClause": parse_TypeParamClause,
        "FunTypeParamClause": parse_FunTypeParamClause,
        "VariantTypeParam": parse_VariantTypeParam,
        "TypeParam": parse_TypeParam,
        "ParamClauses": parse_ParamClauses,
        "ParamClause": parse_ParamClause,
        "Params": parse_Params,
        "Param": parse_Param,
        "ParamType": parse_ParamType,
        "ClassParamClauses": parse_ClassParamClauses,
        "ClassParamClause": parse_ClassParamClause,
        "ClassParams": parse_ClassParams,
        "ClassParam": parse_ClassParam,
        "Bindings": parse_Bindings,
        "Binding": parse_Binding,
        "Modifier": parse_Modifier,
        "LocalModifier": parse_LocalModifier,
        "AccessModifier": parse_AccessModifier,
        "AccessQualifier": parse_AccessQualifier,
        "Annotation": parse_Annotation,
        "ConstrAnnotation": parse_ConstrAnnotation,
        "NameValuePair": parse_NameValuePair,
        "TemplateBody": parse_TemplateBody,
        "TemplateStat": parse_TemplateStat,
        "SelfType": parse_SelfType,
        "Import": parse_Import,
        "ImportExpr": parse_ImportExpr,
        "ImportSelectors": parse_ImportSelectors,
        "ImportSelector": parse_ImportSelector,
        "Dcl": parse_Dcl,
        "ValDcl": parse_ValDcl,
        "VarDcl": parse_VarDcl,
        "FunDcl": parse_FunDcl,
        "FunSig": parse_FunSig,
        "TypeDcl": parse_TypeDcl,
        "PatVarDef": parse_PatVarDef,
        "Def": parse_Def,
        "PatDef": parse_PatDef,
        "VarDef": parse_VarDef,
        "FunDef": parse_FunDef,
        "TypeDef": parse_TypeDef,
        "TmplDef": parse_TmplDef,
        "ClassDef": parse_ClassDef,
        "TraitDef": parse_TraitDef,
        "ObjectDef": parse_ObjectDef,
        "ClassTemplateOpt": parse_ClassTemplateOpt,
        "TraitTemplateOpt": parse_TraitTemplateOpt,
        "ClassTemplate": parse_ClassTemplate,
        "TraitTemplate": parse_TraitTemplate,
        "ClassParents": parse_ClassParents,
        "TraitParents": parse_TraitParents,
        "Constr": parse_Constr,
        "EarlyDefs": parse_EarlyDefs,
        "EarlyDef": parse_EarlyDef,
        "ConstrExpr": parse_ConstrExpr,
        "ConstrBlock": parse_ConstrBlock,
        "SelfInvocation": parse_SelfInvocation,
        "TopStatSeq": parse_TopStatSeq,
        "TopStat": parse_TopStat,
        "Packaging": parse_Packaging,
        "PackageObject": parse_PackageObject,
        "charEscapeSeq": parse_charEscapeSeq,
        "hexDigit": parse_hexDigit,
        "printableChar": parse_printableChar,
        "printableCharNoDoubleQuote": parse_printableCharNoDoubleQuote,
        "charNoDoubleQuote": parse_charNoDoubleQuote,
        "Empty": parse_Empty,
        "PACKAGE": parse_PACKAGE,
        "SEMICOLON": parse_SEMICOLON,
        "HYPHEN": parse_HYPHEN,
        "DOT": parse_DOT,
        "COMMA": parse_COMMA,
        "THIS": parse_THIS,
        "OPBRACKET": parse_OPBRACKET,
        "CLBRACKET": parse_CLBRACKET,
        "ARROW": parse_ARROW,
        "OPPAREN": parse_OPPAREN,
        "CLPAREN": parse_CLPAREN,
        "OPBRACE": parse_OPBRACE,
        "CLBRACE": parse_CLBRACE,
        "TYPE": parse_TYPE,
        "VAL": parse_VAL,
        "WITH": parse_WITH,
        "COLON": parse_COLON,
        "UNDER": parse_UNDER,
        "STAR": parse_STAR,
        "IMPLICIT": parse_IMPLICIT,
        "IF": parse_IF,
        "WHILE": parse_WHILE,
        "EQUAL": parse_EQUAL,
        "PLUS": parse_PLUS,
        "NEW": parse_NEW,
        "LAZY": parse_LAZY,
        "CASE": parse_CASE,
        "AT": parse_AT,
        "LEFTANGLE": parse_LEFTANGLE,
        "RIGHTANGLE": parse_RIGHTANGLE,
        "VAR": parse_VAR,
        "DEF": parse_DEF,
        "OBJECT": parse_OBJECT,
        "EXTENDS": parse_EXTENDS,
        "XmlExpr": parse_XmlExpr,
        "Element": parse_Element,
        "EmptyElemTag": parse_EmptyElemTag,
        "STag": parse_STag,
        "ETag": parse_ETag,
        "Content": parse_Content,
        "Content1": parse_Content1,
        "XmlContent": parse_XmlContent,
        "Attribute": parse_Attribute,
        "AttValue": parse_AttValue,
        "CharData": parse_CharData,
        "Char1": parse_Char1,
        "CharQ": parse_CharQ,
        "CharA": parse_CharA,
        "CharB": parse_CharB,
        "Name": parse_Name,
        "XNameStart": parse_XNameStart,
        "Char": parse_Char,
        "Comment": parse_Comment,
        "Eq": parse_Eq,
        "Ideographic": parse_Ideographic,
        "NameChar": parse_NameChar,
        "NameStartChar": parse_NameStartChar,
        "Reference": parse_Reference,
        "EntityRef": parse_EntityRef,
        "CharRef": parse_CharRef,
        "BaseChar": parse_BaseChar,
        "S": parse_S,
        "XmlPattern": parse_XmlPattern,
        "ElemPattern": parse_ElemPattern,
        "EmptyElemTagP": parse_EmptyElemTagP,
        "STagP": parse_STagP,
        "ETagP": parse_ETagP,
        "ContentP": parse_ContentP,
        "ScalaPatterns": parse_ScalaPatterns,
        "CDSect": parse_CDSect,
        "CDStart": parse_CDStart,
        "CData": parse_CData,
        "CDEnd": parse_CDEnd,
        "PI": parse_PI,
        "PITarget": parse_PITarget
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "CompilationUnit";
      }
      
      var pos = { offset: 0, line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = { offset: 0, line: 1, column: 1, seenCR: false };
      var rightmostFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function clone(object) {
        var result = {};
        for (var key in object) {
          result[key] = object[key];
        }
        return result;
      }
      
      function advance(pos, n) {
        var endOffset = pos.offset + n;
        
        for (var offset = pos.offset; offset < endOffset; offset++) {
          var ch = input.charAt(offset);
          if (ch === "\n") {
            if (!pos.seenCR) { pos.line++; }
            pos.column = 1;
            pos.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            pos.line++;
            pos.column = 1;
            pos.seenCR = true;
          } else {
            pos.column++;
            pos.seenCR = false;
          }
        }
        
        pos.offset += n;
      }
      
      function matchFailed(failure) {
        if (pos.offset < rightmostFailuresPos.offset) {
          return;
        }
        
        if (pos.offset > rightmostFailuresPos.offset) {
          rightmostFailuresPos = clone(pos);
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_CompilationUnit() {
        var cacheKey = "CompilationUnit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse___();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_PACKAGE();
          if (result2 !== null) {
            result3 = parse_QualId();
            if (result3 !== null) {
              result4 = parse_semi();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_PACKAGE();
            if (result2 !== null) {
              result3 = parse_QualId();
              if (result3 !== null) {
                result4 = parse_semi();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result2 = parse_TopStatSeq();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pcs, tss) {
              var result = [];
              for (var i = 0; i < pcs.length; i++) {
                result.push(pcs[i][1]);
              }
        	  return {type: "CompilationUnit", packages:result, topStatseq:tss};
            })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_upper() {
        var cacheKey = "upper@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[A-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 36) {
            result0 = "$";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 95) {
              result0 = "_";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"_\"");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_lower() {
        var cacheKey = "lower@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[a-z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_letter() {
        var cacheKey = "letter@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_upper();
        if (result0 === null) {
          result0 = parse_lower();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_digit() {
        var cacheKey = "digit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[0-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_opchar() {
        var cacheKey = "opchar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[+\-*\/><=!&|%:~^|]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-*\\/><=!&|%:~^|]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_op() {
        var cacheKey = "op@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.substr(pos.offset, 2) === "/*") {
          result0 = "/*";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 2) === "//") {
            result0 = "//";
            advance(pos, 2);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"//\"");
            }
          }
          if (result0 === null) {
            result0 = parse_EQUAL();
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result2 = parse_opchar();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_opchar();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars) {return chars.join("");})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_varid() {
        var cacheKey = "varid@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_lower();
        if (result0 !== null) {
          result1 = parse_idrest();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, start, parts) {return start + parts;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_plainid() {
        var cacheKey = "plainid@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_upper();
        if (result0 !== null) {
          result1 = parse_idrest();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, start, parts) {return start + parts;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_varid();
          if (result0 === null) {
            result0 = parse_op();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_id() {
        var cacheKey = "id@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_plainid();
        if (result0 !== null) {
          result0 = (function(offset, line, column, nm) {return { type: "Identifier", name: nm }; })(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (/^[`]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[`]");
            }
          }
          if (result0 !== null) {
            result1 = parse_stringLiteral();
            if (result1 !== null) {
              if (/^[`]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[`]");
                }
              }
              if (result2 !== null) {
                result3 = parse___();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, str) { return { type: "Identifier2", name: '`' + str + '`'}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_idrest() {
        var cacheKey = "idrest@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_letter();
        if (result1 === null) {
          result1 = parse_digit();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_letter();
          if (result1 === null) {
            result1 = parse_digit();
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 95) {
            result1 = "_";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"_\"");
            }
          }
          if (result1 !== null) {
            result2 = parse_op();
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chars, ops) {return chars.join("") + '_' + ops;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_letter();
          if (result1 === null) {
            result1 = parse_digit();
          }
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_letter();
            if (result1 === null) {
              result1 = parse_digit();
            }
          }
          if (result0 !== null) {
            result1 = parse___();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, chars) {return chars.join("");})(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_integerLiteral() {
        var cacheKey = "integerLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_decimalNumeral();
        if (result0 === null) {
          result0 = parse_hexNumeral();
          if (result0 === null) {
            result0 = parse_octalNumeral();
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 76) {
            result1 = "L";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"L\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 108) {
              result1 = "l";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"l\"");
              }
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ilit, ll) {
        	return ilit + ll;
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_decimalNumeral() {
        var cacheKey = "decimalNumeral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        if (input.charCodeAt(pos.offset) === 48) {
          result0 = "0";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_nonZeroDigit();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_digit();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_digit();
            }
            if (result1 !== null) {
              result2 = parse___();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, start, parts) {return start + parts.join("");})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_hexNumeral() {
        var cacheKey = "hexNumeral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 48) {
          result0 = "0";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 120) {
            result1 = "x";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"x\"");
            }
          }
          if (result1 !== null) {
            result3 = parse_hexDigit();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_hexDigit();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) {return "0x" + parts.join("");})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_octalNumeral() {
        var cacheKey = "octalNumeral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 48) {
          result0 = "0";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (result0 !== null) {
          result2 = parse_octalDigit();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_octalDigit();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, parts) {return '0' + parts.join("");})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_nonZeroDigit() {
        var cacheKey = "nonZeroDigit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[1-9]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_octalDigit() {
        var cacheKey = "octalDigit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[0-7]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-7]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_floatingPointLiteral() {
        var cacheKey = "floatingPointLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result1 = parse_digit();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_digit();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 46) {
            result1 = ".";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_digit();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_digit();
            }
            if (result2 !== null) {
              result3 = parse_exponentPart();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_floatType();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse___();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, dp, ds, exp, type) {return dp.join("") + '.' + ds.join("") + exp + type;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.charCodeAt(pos.offset) === 46) {
            result0 = ".";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (result0 !== null) {
            result2 = parse_digit();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_digit();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_exponentPart();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result3 = parse_floatType();
                result3 = result3 !== null ? result3 : "";
                if (result3 !== null) {
                  result4 = parse___();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, dp, exp, type) {return '.' + dp.join("") + exp + type;})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result1 = parse_digit();
            if (result1 !== null) {
              result0 = [];
              while (result1 !== null) {
                result0.push(result1);
                result1 = parse_digit();
              }
            } else {
              result0 = null;
            }
            if (result0 !== null) {
              result1 = parse_exponentPart();
              if (result1 !== null) {
                result2 = parse_floatType();
                result2 = result2 !== null ? result2 : "";
                if (result2 !== null) {
                  result3 = parse___();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, dp, exp, type) {return dp.join("") + exp + type;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result1 = parse_digit();
              if (result1 !== null) {
                result0 = [];
                while (result1 !== null) {
                  result0.push(result1);
                  result1 = parse_digit();
                }
              } else {
                result0 = null;
              }
              if (result0 !== null) {
                result1 = parse_exponentPart();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result2 = parse_floatType();
                  if (result2 !== null) {
                    result3 = parse___();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, dp, exp, type) {return dp.join("") + exp + type;})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_exponentPart() {
        var cacheKey = "exponentPart@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 69) {
          result0 = "E";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"E\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 101) {
            result0 = "e";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"e\"");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 43) {
            result1 = "+";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"+\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 45) {
              result1 = "-";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result3 = parse_digit();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_digit();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, exp, sign, dt) {return exp + sign + dt.join("");})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_floatType() {
        var cacheKey = "floatType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos.offset) === 70) {
          result0 = "F";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"F\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 102) {
            result0 = "f";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"f\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 68) {
              result0 = "D";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"D\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos.offset) === 100) {
                result0 = "d";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"d\"");
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_booleanLiteral() {
        var cacheKey = "booleanLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "true") {
          result0 = "true";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 5) === "false") {
            result0 = "false";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"false\"");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ret) {return {type: "booleanLiteral", value: chrs};})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_characterLiteral() {
        var cacheKey = "characterLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (/^[']/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[']");
          }
        }
        if (result0 !== null) {
          result1 = parse_printableChar();
          if (result1 === null) {
            result1 = parse_charEscapeSeq();
          }
          if (result1 !== null) {
            if (/^[']/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[']");
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chr) {return chr;})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_stringLiteral() {
        var cacheKey = "stringLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_stringElement();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_stringElement();
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ele) {return {type: "stringLiteral", value: ele.join("")};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 3) === "\"\"\"") {
            result0 = "\"\"\"";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\\\"\\\"\"");
            }
          }
          if (result0 !== null) {
            result1 = parse_multiLineChars();
            if (result1 !== null) {
              result2 = parse___();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, chrs) {return {type: "stringLiteralMulti", value: chrs};})(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_stringElement() {
        var cacheKey = "stringElement@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_printableCharNoDoubleQuote();
        if (result0 === null) {
          result0 = parse_charEscapeSeq();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_multiLineChars() {
        var cacheKey = "multiLineChars@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_multiLineCharsElements();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_multiLineCharsElements();
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 5) === "\"\"\"\"\"") {
            result1 = "\"\"\"\"\"";
            advance(pos, 5);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\\\"\\\"\\\"\\\"\"");
            }
          }
          if (result1 === null) {
            if (input.substr(pos.offset, 4) === "\"\"\"\"") {
              result1 = "\"\"\"\"";
              advance(pos, 4);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\\\"\\\"\\\"\"");
              }
            }
            if (result1 === null) {
              if (input.substr(pos.offset, 3) === "\"\"\"") {
                result1 = "\"\"\"";
                advance(pos, 3);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\"\\\"\\\"\"");
                }
              }
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, eles) {return eles.join("");})(pos0.offset, pos0.line, pos0.column, result0[0]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_multiLineCharsElements() {
        var cacheKey = "multiLineCharsElements@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 34) {
            result1 = "\"";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_charNoDoubleQuote();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chrs) {return chrs.join("");})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_symbolLiteral() {
        var cacheKey = "symbolLiteral@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_plainid();
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pi) {return "'" + pi;})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = "comment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_singleLineComment();
        if (result0 === null) {
          result0 = parse_multiLineComment();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_singleLineComment() {
        var cacheKey = "singleLineComment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "//") {
          result0 = "//";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          result2 = parse_nl();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            if (input.length > pos.offset) {
              result3 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("any character");
              }
            }
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            result2 = parse_nl();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              if (input.length > pos.offset) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("any character");
                }
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result3 = parse_nl();
            if (result3 !== null) {
              result2 = [];
              while (result3 !== null) {
                result2.push(result3);
                result3 = parse_nl();
              }
            } else {
              result2 = null;
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_multiLineComment() {
        var cacheKey = "multiLineComment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        if (/^[\/]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\/]");
          }
        }
        if (result0 !== null) {
          if (/^[*]/.test(input.charAt(pos.offset))) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[*]");
            }
          }
          if (result1 !== null) {
            result2 = [];
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.substr(pos.offset, 2) === "/*") {
              result3 = "/*";
              advance(pos, 2);
            } else {
              result3 = null;
              if (reportFailures === 0) {
                matchFailed("\"/*\"");
              }
            }
            reportFailures--;
            if (result3 !== null) {
              result3 = "";
              pos = clone(pos2);
            } else {
              result3 = null;
            }
            if (result3 !== null) {
              result4 = parse_multiLineComment();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            } else {
              result3 = null;
              pos = clone(pos1);
            }
            if (result3 === null) {
              pos1 = clone(pos);
              pos2 = clone(pos);
              reportFailures++;
              if (input.substr(pos.offset, 2) === "*/") {
                result3 = "*/";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"*/\"");
                }
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                if (input.length > pos.offset) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("any character");
                  }
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            }
            while (result3 !== null) {
              result2.push(result3);
              pos1 = clone(pos);
              pos2 = clone(pos);
              reportFailures++;
              if (input.substr(pos.offset, 2) === "/*") {
                result3 = "/*";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/*\"");
                }
              }
              reportFailures--;
              if (result3 !== null) {
                result3 = "";
                pos = clone(pos2);
              } else {
                result3 = null;
              }
              if (result3 !== null) {
                result4 = parse_multiLineComment();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              } else {
                result3 = null;
                pos = clone(pos1);
              }
              if (result3 === null) {
                pos1 = clone(pos);
                pos2 = clone(pos);
                reportFailures++;
                if (input.substr(pos.offset, 2) === "*/") {
                  result3 = "*/";
                  advance(pos, 2);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"*/\"");
                  }
                }
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
                if (result3 !== null) {
                  if (input.length > pos.offset) {
                    result4 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result4 = null;
                    if (reportFailures === 0) {
                      matchFailed("any character");
                    }
                  }
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              }
            }
            if (result2 !== null) {
              if (/^[*]/.test(input.charAt(pos.offset))) {
                result3 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("[*]");
                }
              }
              if (result3 !== null) {
                if (/^[\/]/.test(input.charAt(pos.offset))) {
                  result4 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\/]");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = "__@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        result0 = [];
        result1 = parse_whitespace();
        if (result1 === null) {
          result1 = parse_comment();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_whitespace();
          if (result1 === null) {
            result1 = parse_comment();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_nl() {
        var cacheKey = "nl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "\r\n") {
          result0 = "\r\n";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\r\\n\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 10) {
            result0 = "\n";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 13) {
              result0 = "\r";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_semi() {
        var cacheKey = "semi@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_SEMICOLON();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_nl();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_nl();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          result1 = parse_nl();
          if (result1 !== null) {
            result0 = [];
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_nl();
            }
          } else {
            result0 = null;
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = "whitespace@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[ \t]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\t]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Literal() {
        var cacheKey = "Literal@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_HYPHEN();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_floatingPointLiteral();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, minus, val) {return {type: "floatingPointLiteral", value: minus + val}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_HYPHEN();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_integerLiteral();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, minus, val) {return {type: "integerLiteral", value: minus + val}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_booleanLiteral();
            if (result0 === null) {
              pos0 = clone(pos);
              result0 = parse_characterLiteral();
              if (result0 !== null) {
                result0 = (function(offset, line, column, val) {return {type: "characterLiteral", value: val}; })(pos0.offset, pos0.line, pos0.column, result0);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_stringLiteral();
                if (result0 === null) {
                  pos0 = clone(pos);
                  result0 = parse_symbolLiteral();
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, val) {return {type: "symbolLiteral", value: val}; })(pos0.offset, pos0.line, pos0.column, result0);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.substr(pos.offset, 4) === "null") {
                      result0 = "null";
                      advance(pos, 4);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"null\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse___();
                      if (result1 !== null) {
                        result0 = [result0, result1];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column) {return {type: "nullLiteral", value: "null"}; })(pos0.offset, pos0.line, pos0.column);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_QualId() {
        var cacheKey = "QualId@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_DOT();
          if (result2 !== null) {
            result3 = parse_id();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_DOT();
            if (result2 !== null) {
              result3 = parse_id();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              var result = [head];
              for (var i = 0; i < tail.length; i++) {
                result.push(tail[i][1]);
              }
              return result;
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ids() {
        var cacheKey = "ids@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_id();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_id();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
              var result = [head];
              for (var i = 0; i < tail.length; i++) {
                result.push(tail[i][1]);
              }
              return {type:"ids", ids:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Path() {
        var cacheKey = "Path@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        result0 = parse_StableId();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          pos2 = clone(pos);
          result0 = parse_id();
          if (result0 !== null) {
            result1 = parse_DOT();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_THIS();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, pre) {return {type:"Path", id:ftr(pre, 0)};})(pos0.offset, pos0.line, pos0.column, result0[0]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_StableId() {
        var cacheKey = "StableId@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_DOT();
          if (result2 !== null) {
            result3 = parse_id();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_DOT();
            if (result2 !== null) {
              result3 = parse_id();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, base, accessors) {
              var result = [base];
              for (var i = 0; i < accessors.length; i++) {
                result.push(accessors[i][1]);
        	  }
              return {type:"StableId", contents:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          pos2 = clone(pos);
          result0 = parse_id();
          if (result0 !== null) {
            result1 = parse_DOT();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_THIS();
            if (result1 !== null) {
              pos2 = clone(pos);
              result3 = parse_DOT();
              if (result3 !== null) {
                result4 = parse_id();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result2 = [];
                while (result3 !== null) {
                  result2.push(result3);
                  pos2 = clone(pos);
                  result3 = parse_DOT();
                  if (result3 !== null) {
                    result4 = parse_id();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                }
              } else {
                result2 = null;
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, pre, th, accessors) {
                var result = pre !==""? [pre[0], th] : [th];
                for (var i = 0; i < accessors.length; i++) {
                  result.push(accessors[i][1]);
          	  }
          	  return {type:"StableId", contents:result};
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            pos2 = clone(pos);
            result0 = parse_id();
            if (result0 !== null) {
              result1 = parse_DOT();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos2);
              }
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              if (input.substr(pos.offset, 5) === "super") {
                result1 = "super";
                advance(pos, 5);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"super\"");
                }
              }
              if (result1 !== null) {
                result2 = parse___();
                if (result2 !== null) {
                  result3 = parse_ClassQualifier();
                  result3 = result3 !== null ? result3 : "";
                  if (result3 !== null) {
                    pos2 = clone(pos);
                    result5 = parse_DOT();
                    if (result5 !== null) {
                      result6 = parse_id();
                      if (result6 !== null) {
                        result5 = [result5, result6];
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                    if (result5 !== null) {
                      result4 = [];
                      while (result5 !== null) {
                        result4.push(result5);
                        pos2 = clone(pos);
                        result5 = parse_DOT();
                        if (result5 !== null) {
                          result6 = parse_id();
                          if (result6 !== null) {
                            result5 = [result5, result6];
                          } else {
                            result5 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                      }
                    } else {
                      result4 = null;
                    }
                    if (result4 !== null) {
                      result0 = [result0, result1, result2, result3, result4];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, pre, cl, accessors) {
                  var result = pre !== ""? [pre[0], {type:"Keyword", word:"super"}] : [{type:"Keyword", word:"super"}];
            if(cl !== ""){
            	result.push(cl);
            }
            	  for (var i = 0; i < accessors.length; i++) {
                    result.push(accessors[i][1]);
            	  }
            	  return {type:"StableId", contents:result};
                })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3], result0[4]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassQualifier() {
        var cacheKey = "ClassQualifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACKET();
        if (result0 !== null) {
          result1 = parse_id();
          if (result1 !== null) {
            result2 = parse_CLBRACKET();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, qual) {return {type: "ClassQualifier", id:qual};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Type() {
        var cacheKey = "Type@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_FunctionArgTypes();
        if (result0 !== null) {
          result1 = parse_ARROW();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, funcarg, tp) {return {type:"FunctionType", left:funcarg, right:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_InfixType();
          if (result0 !== null) {
            result1 = parse_ExistentialClause();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tp, ext) {return {type:"Type", ext:ext, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionArgTypes() {
        var cacheKey = "FunctionArgTypes@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        result0 = parse_InfixType();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_OPPAREN();
          if (result0 !== null) {
            pos2 = clone(pos);
            result1 = parse_ParamType();
            if (result1 !== null) {
              result2 = [];
              pos3 = clone(pos);
              result3 = parse_COMMA();
              if (result3 !== null) {
                result4 = parse_ParamType();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              while (result3 !== null) {
                result2.push(result3);
                pos3 = clone(pos);
                result3 = parse_COMMA();
                if (result3 !== null) {
                  result4 = parse_ParamType();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos3);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              }
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_CLPAREN();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tps) {
                var result = [];
          if(tps !== ""){
          	result.push(tps[0]);
          	for (var i = 0; i < tps[1].length; i++) {
                  result.push(tps[1][i][1]);
          	  }
          }
          	  return {type:"FunctionArgTypes", contents:result};
              })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExistentialClause() {
        var cacheKey = "ExistentialClause@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "forSome") {
          result0 = "forSome";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"forSome\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_OPBRACE();
            if (result2 !== null) {
              result3 = parse_ExistentialDcl();
              if (result3 !== null) {
                result4 = [];
                pos2 = clone(pos);
                result5 = parse_semi();
                if (result5 !== null) {
                  result6 = parse_ExistentialDcl();
                  if (result6 !== null) {
                    result5 = [result5, result6];
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos2);
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = clone(pos);
                  result5 = parse_semi();
                  if (result5 !== null) {
                    result6 = parse_ExistentialDcl();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                }
                if (result4 !== null) {
                  result5 = parse_CLBRACE();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ex, exs) {
              var result = [{type:"Keyword", word:"forSome"}];
        	  result.push(ex);
        	for (var i = 0; i < exs.length; i++) {
                result.push(exs[i][1]);
        	  }	  return {type:"ExistentialClause", contents:result};
            })(pos0.offset, pos0.line, pos0.column, result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ExistentialDcl() {
        var cacheKey = "ExistentialDcl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_TYPE();
        if (result0 !== null) {
          result1 = parse_TypeDcl();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tp, dcl) {return {type:"ExistentialDcl", pre:tp, dcl:dcl}})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_VAL();
          if (result0 !== null) {
            result1 = parse_ValDcl();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, vl, dcl) {return {type:"ExistentialDcl", pre:vl, dcl:dcl}})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_InfixType() {
        var cacheKey = "InfixType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_CompoundType();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_id();
          if (result2 !== null) {
            result3 = parse_nl();
            result3 = result3 !== null ? result3 : "";
            if (result3 !== null) {
              result4 = parse_CompoundType();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_id();
            if (result2 !== null) {
              result3 = parse_nl();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_CompoundType();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tails) {
              var ids = [], cts = [];
        	for (var i = 0; i < tails.length; i++) {
                ids.push(tails[i][0]);
                cts.push(tails[i][2]);
        	  }	  return {type:"InfixType", compoundType:head, ids:ids, compoundTypes:cts};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CompoundType() {
        var cacheKey = "CompoundType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_AnnotType();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_WITH();
          if (result1 !== null) {
            result2 = parse_AnnotType();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_Refinement();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, at, wat, ref) {return {type:"CompoundType", annotType:[at, ftr(wat)], ref:ftr(ref)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Refinement();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AnnotType() {
        var cacheKey = "AnnotType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_SimpleType();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Annotation();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Annotation();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, st, annotation) {return {type:"AnnotType", st:st, annotation:annotation}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SimpleType() {
        var cacheKey = "SimpleType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Path();
        if (result0 !== null) {
          result1 = parse_DOT();
          if (result1 !== null) {
            result2 = parse_TYPE();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_TypeArgs();
              if (result4 === null) {
                result4 = parse_withId();
              }
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_TypeArgs();
                if (result4 === null) {
                  result4 = parse_withId();
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, path, dot, tp, tails) {return {type:"SimpleType", id:[path, dot, tp], postfix:tails}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_StableId();
          if (result0 !== null) {
            result1 = [];
            result2 = parse_TypeArgs();
            if (result2 === null) {
              result2 = parse_withId();
            }
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_TypeArgs();
              if (result2 === null) {
                result2 = parse_withId();
              }
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, si, tails) {return {type:"SimpleType", id:[si], postfix:tails}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_OPPAREN();
            if (result0 !== null) {
              result1 = parse_Types();
              if (result1 !== null) {
                result2 = parse_CLPAREN();
                if (result2 !== null) {
                  result3 = [];
                  result4 = parse_TypeArgs();
                  if (result4 === null) {
                    result4 = parse_withId();
                  }
                  while (result4 !== null) {
                    result3.push(result4);
                    result4 = parse_TypeArgs();
                    if (result4 === null) {
                      result4 = parse_withId();
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, op, tps, cl, tails) {return {type:"SimpleType", id:[op, tps, cl], postfix:tails}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_withId() {
        var cacheKey = "withId@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 35) {
          result0 = "#";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"#\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_id();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {return {type:"withId", id:id};})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeArgs() {
        var cacheKey = "TypeArgs@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACKET();
        if (result0 !== null) {
          result1 = parse_Types();
          if (result1 !== null) {
            result2 = parse_CLBRACKET();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, types) {return {type:"TypeArgs", types:types}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Types() {
        var cacheKey = "Types@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Type();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_Type();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_Type();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tp, tps) {
              var result = [tp];
        	  for (var i = 0; i < tps.length; i++) {
                result.push(tps[i][1]);
        	  }
        	  return {type:"Types", contents:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Refinement() {
        var cacheKey = "Refinement@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_nl();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_OPBRACE();
          if (result1 !== null) {
            result2 = parse_RefineStat();
            if (result2 !== null) {
              result3 = [];
              pos2 = clone(pos);
              result4 = parse_semi();
              if (result4 !== null) {
                result5 = parse_RefineStat();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = clone(pos);
                result4 = parse_semi();
                if (result4 !== null) {
                  result5 = parse_RefineStat();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                result4 = parse_CLBRACE();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ref, refs) {
              var result = [ref];
        	  for (var i = 0; i < refs.length; i++) {
                result.push(refs[i][1]);
        	  }
        	  return {type:"Refinement", contents:result};
            })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_RefineStat() {
        var cacheKey = "RefineStat@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_Dcl();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_TYPE();
          if (result0 !== null) {
            result1 = parse_TypeDef();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, td) {return {type:"RefineStat", typedef:td}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_Empty();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Ascription() {
        var cacheKey = "Ascription@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_COLON();
        if (result0 !== null) {
          result1 = parse_InfixType();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, infix) {return {type:"Ascription", contents:[infix]}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_COLON();
          if (result0 !== null) {
            result2 = parse_Annotation();
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_Annotation();
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, as) {return {type:"Ascription", contents:as}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_COLON();
            if (result0 !== null) {
              result1 = parse_UNDER();
              if (result1 !== null) {
                result2 = parse_STAR();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, ud, st) {return {type:"Ascription", contents:[us,st]}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Expr() {
        var cacheKey = "Expr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Bindings();
        if (result0 === null) {
          pos2 = clone(pos);
          result0 = parse_IMPLICIT();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_id();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
          if (result0 === null) {
            result0 = parse_UNDER();
          }
        }
        if (result0 !== null) {
          result1 = parse_ARROW();
          if (result1 !== null) {
            result2 = parse_Expr();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) {return {type:"AnonymousFunction", left:left, right:right}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Expr1();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Expr1() {
        var cacheKey = "Expr1@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7, result8, result9;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_IF();
        if (result0 !== null) {
          result1 = parse_OPPAREN();
          if (result1 !== null) {
            result2 = parse_Expr();
            if (result2 !== null) {
              result3 = parse_CLPAREN();
              if (result3 !== null) {
                result4 = [];
                result5 = parse_nl();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_nl();
                }
                if (result4 !== null) {
                  result5 = parse_Expr();
                  if (result5 !== null) {
                    pos2 = clone(pos);
                    result6 = parse_semi();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      if (input.substr(pos.offset, 4) === "else") {
                        result7 = "else";
                        advance(pos, 4);
                      } else {
                        result7 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"else\"");
                        }
                      }
                      if (result7 !== null) {
                        result8 = parse___();
                        if (result8 !== null) {
                          result9 = parse_Expr();
                          if (result9 !== null) {
                            result6 = [result6, result7, result8, result9];
                          } else {
                            result6 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result6 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos2);
                    }
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5, result6];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, condition, ifStatement, elseStatement) {
              return {
                type:          "IfStatement",
                condition:     condition,
                ifStatement:   ifStatement,
                elseStatement: elseStatement !== "" ? elseStatement[3] : null
              };
            })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5], result0[6]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_WHILE();
          if (result0 !== null) {
            result1 = parse_OPPAREN();
            if (result1 !== null) {
              result2 = parse_Expr();
              if (result2 !== null) {
                result3 = parse_CLPAREN();
                if (result3 !== null) {
                  result4 = [];
                  result5 = parse_nl();
                  while (result5 !== null) {
                    result4.push(result5);
                    result5 = parse_nl();
                  }
                  if (result4 !== null) {
                    result5 = parse_Expr();
                    if (result5 !== null) {
                      result0 = [result0, result1, result2, result3, result4, result5];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, condition, statement) {
                return {
                  type: "WhileStatement",
                  condition: condition,
                  statement: statement
                };
              })(pos0.offset, pos0.line, pos0.column, result0[2], result0[5]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 3) === "try") {
              result0 = "try";
              advance(pos, 3);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"try\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_OPBRACE();
                if (result2 !== null) {
                  result3 = parse_Block();
                  if (result3 !== null) {
                    result4 = parse_CLBRACE();
                    if (result4 !== null) {
                      pos2 = clone(pos);
                      if (input.substr(pos.offset, 5) === "catch") {
                        result5 = "catch";
                        advance(pos, 5);
                      } else {
                        result5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"catch\"");
                        }
                      }
                      if (result5 !== null) {
                        result6 = parse___();
                        if (result6 !== null) {
                          result7 = parse_OPBRACE();
                          if (result7 !== null) {
                            result8 = parse_CaseClauses();
                            if (result8 !== null) {
                              result9 = parse_CLBRACE();
                              if (result9 !== null) {
                                result5 = [result5, result6, result7, result8, result9];
                              } else {
                                result5 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result5 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result5 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result5 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                      result5 = result5 !== null ? result5 : "";
                      if (result5 !== null) {
                        pos2 = clone(pos);
                        if (input.substr(pos.offset, 7) === "finally") {
                          result6 = "finally";
                          advance(pos, 7);
                        } else {
                          result6 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"finally\"");
                          }
                        }
                        if (result6 !== null) {
                          result7 = parse___();
                          if (result7 !== null) {
                            result8 = parse_Expr();
                            if (result8 !== null) {
                              result6 = [result6, result7, result8];
                            } else {
                              result6 = null;
                              pos = clone(pos2);
                            }
                          } else {
                            result6 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result6 = null;
                          pos = clone(pos2);
                        }
                        result6 = result6 !== null ? result6 : "";
                        if (result6 !== null) {
                          result0 = [result0, result1, result2, result3, result4, result5, result6];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, block, catch_, finally_) {
                  return {
                    type:      "TryStatement",
                    block:     block,
                    "catch":   ftr(catch_, 3),
                    "finally": ftr(finally_, 2)
                  };
                })(pos0.offset, pos0.line, pos0.column, result0[3], result0[5], result0[6]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              if (input.substr(pos.offset, 2) === "do") {
                result0 = "do";
                advance(pos, 2);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"do\"");
                }
              }
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  result2 = parse_Expr();
                  if (result2 !== null) {
                    result3 = parse_semi();
                    result3 = result3 !== null ? result3 : "";
                    if (result3 !== null) {
                      result4 = parse_WHILE();
                      if (result4 !== null) {
                        result5 = parse_OPPAREN();
                        if (result5 !== null) {
                          result6 = parse_Expr();
                          if (result6 !== null) {
                            result7 = parse_CLPAREN();
                            if (result7 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, statement, condition) {
                    return {
                      type: "DoWhileStatement",
                      condition: condition,
                      statement: statement
                    };
                  })(pos0.offset, pos0.line, pos0.column, result0[2], result0[6]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                if (input.substr(pos.offset, 3) === "for") {
                  result0 = "for";
                  advance(pos, 3);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"for\"");
                  }
                }
                if (result0 !== null) {
                  result1 = parse___();
                  if (result1 !== null) {
                    pos2 = clone(pos);
                    result2 = parse_OPPAREN();
                    if (result2 !== null) {
                      result3 = parse_Enumerators();
                      if (result3 !== null) {
                        result4 = parse_CLPAREN();
                        if (result4 !== null) {
                          result2 = [result2, result3, result4];
                        } else {
                          result2 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                    if (result2 === null) {
                      pos2 = clone(pos);
                      result2 = parse_OPBRACE();
                      if (result2 !== null) {
                        result3 = parse_Enumerators();
                        if (result3 !== null) {
                          result4 = parse_CLBRACE();
                          if (result4 !== null) {
                            result2 = [result2, result3, result4];
                          } else {
                            result2 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result2 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    }
                    if (result2 !== null) {
                      result3 = [];
                      result4 = parse_nl();
                      while (result4 !== null) {
                        result3.push(result4);
                        result4 = parse_nl();
                      }
                      if (result3 !== null) {
                        pos2 = clone(pos);
                        if (input.substr(pos.offset, 5) === "yield") {
                          result4 = "yield";
                          advance(pos, 5);
                        } else {
                          result4 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"yield\"");
                          }
                        }
                        if (result4 !== null) {
                          result5 = parse___();
                          if (result5 !== null) {
                            result4 = [result4, result5];
                          } else {
                            result4 = null;
                            pos = clone(pos2);
                          }
                        } else {
                          result4 = null;
                          pos = clone(pos2);
                        }
                        result4 = result4 !== null ? result4 : "";
                        if (result4 !== null) {
                          result5 = parse_Expr();
                          if (result5 !== null) {
                            result0 = [result0, result1, result2, result3, result4, result5];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, enums, yield, statement) {
                      return {
                        type:        "ForStatement",
                        enumrator: enums[1],
                        yield:     yield !== "" ? yield[0] : null,
                        statement:   statement
                      };
                    })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4], result0[5]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  if (input.substr(pos.offset, 5) === "throw") {
                    result0 = "throw";
                    advance(pos, 5);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"throw\"");
                    }
                  }
                  if (result0 !== null) {
                    result1 = parse___();
                    if (result1 !== null) {
                      result2 = parse_Expr();
                      if (result2 !== null) {
                        result0 = [result0, result1, result2];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, exception) {
                        return {
                          type:      "ThrowStatement",
                          exception: exception
                        };
                      })(pos0.offset, pos0.line, pos0.column, result0[2]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    if (input.substr(pos.offset, 6) === "return") {
                      result0 = "return";
                      advance(pos, 6);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"return\"");
                      }
                    }
                    if (result0 !== null) {
                      result1 = parse___();
                      if (result1 !== null) {
                        result2 = parse_Expr();
                        result2 = result2 !== null ? result2 : "";
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, value) {
                          return {
                            type:  "ReturnStatement",
                            value: value !== "" ? value : null
                          };
                        })(pos0.offset, pos0.line, pos0.column, result0[2]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_SimpleExpr1();
                      if (result0 !== null) {
                        result1 = parse_ArgumentExprs();
                        if (result1 !== null) {
                          result2 = parse_EQUAL();
                          if (result2 !== null) {
                            result3 = parse_Expr();
                            if (result3 !== null) {
                              result0 = [result0, result1, result2, result3];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, se1, ae, exp) {return {type:"AssignmentExpression", left:[se1, ae], right:exp}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                      if (result0 === null) {
                        pos0 = clone(pos);
                        pos1 = clone(pos);
                        result0 = parse_PostfixExpr();
                        if (result0 !== null) {
                          result1 = parse_Ascription();
                          if (result1 !== null) {
                            result0 = [result0, result1];
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                        if (result0 !== null) {
                          result0 = (function(offset, line, column, pe, as) {return {type:"Expr1withAscription", postfix:pe, ascription:as}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                        }
                        if (result0 === null) {
                          pos = clone(pos0);
                        }
                        if (result0 === null) {
                          pos0 = clone(pos);
                          pos1 = clone(pos);
                          result0 = parse_PostfixExpr();
                          if (result0 !== null) {
                            if (input.substr(pos.offset, 5) === "match") {
                              result1 = "match";
                              advance(pos, 5);
                            } else {
                              result1 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"match\"");
                              }
                            }
                            if (result1 !== null) {
                              result2 = parse___();
                              if (result2 !== null) {
                                result3 = parse_OPBRACE();
                                if (result3 !== null) {
                                  result4 = parse_CaseClauses();
                                  if (result4 !== null) {
                                    result5 = parse_CLBRACE();
                                    if (result5 !== null) {
                                      result0 = [result0, result1, result2, result3, result4, result5];
                                    } else {
                                      result0 = null;
                                      pos = clone(pos1);
                                    }
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                          if (result0 !== null) {
                            result0 = (function(offset, line, column, pe, cases) {return {type:"PatternMatchingExpression", postfix:pe, cases:cc}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[4]);
                          }
                          if (result0 === null) {
                            pos = clone(pos0);
                          }
                          if (result0 === null) {
                            pos0 = clone(pos);
                            pos1 = clone(pos);
                            pos2 = clone(pos);
                            result0 = parse_SimpleExpr();
                            if (result0 !== null) {
                              result1 = parse_DOT();
                              if (result1 !== null) {
                                result0 = [result0, result1];
                              } else {
                                result0 = null;
                                pos = clone(pos2);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos2);
                            }
                            result0 = result0 !== null ? result0 : "";
                            if (result0 !== null) {
                              result1 = parse_id();
                              if (result1 !== null) {
                                result2 = parse_EQUAL();
                                if (result2 !== null) {
                                  result3 = parse_Expr();
                                  if (result3 !== null) {
                                    result0 = [result0, result1, result2, result3];
                                  } else {
                                    result0 = null;
                                    pos = clone(pos1);
                                  }
                                } else {
                                  result0 = null;
                                  pos = clone(pos1);
                                }
                              } else {
                                result0 = null;
                                pos = clone(pos1);
                              }
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                            if (result0 !== null) {
                              result0 = (function(offset, line, column, se, id, exp) {return {type:"AssignmentExpression", left:[ftr(se), id], right:exp}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
                            }
                            if (result0 === null) {
                              pos = clone(pos0);
                            }
                            if (result0 === null) {
                              result0 = parse_PostfixExpr();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PostfixExpr() {
        var cacheKey = "PostfixExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_InfixExpr();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_id();
          if (result1 !== null) {
            result2 = parse_nl();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, infix, id) {return {type:"PostfixExpression", infix:infix, id: ftr(id, 0)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_InfixExpr() {
        var cacheKey = "InfixExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_PrefixExpr();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_id();
          if (result2 !== null) {
            result3 = parse_nl();
            result3 = result3 !== null ? result3 : "";
            if (result3 !== null) {
              result4 = parse_InfixExpr();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_id();
            if (result2 !== null) {
              result3 = parse_nl();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_InfixExpr();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tails) {
              var ids = [], exps = [];
        	for (var i = 0; i < tails.length; i++) {
                ids.push(tails[i][0]);
                exps.push(tails[i][2]);
        	  }
        	return {type:"InfixExpression", left:head, ops:ids, rights:exps};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PrefixExpr() {
        var cacheKey = "PrefixExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_HYPHEN();
        if (result0 === null) {
          result0 = parse_PLUS();
          if (result0 === null) {
            pos2 = clone(pos);
            if (input.charCodeAt(pos.offset) === 126) {
              result0 = "~";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"~\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos2);
              }
            } else {
              result0 = null;
              pos = clone(pos2);
            }
            if (result0 === null) {
              pos2 = clone(pos);
              if (input.charCodeAt(pos.offset) === 33) {
                result0 = "!";
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!\"");
                }
              }
              if (result0 !== null) {
                result1 = parse___();
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos2);
                }
              } else {
                result0 = null;
                pos = clone(pos2);
              }
            }
          }
        }
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_SimpleExpr();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, op, expr) {
        	return {type:"PrefixExpression", op:ftr(op), expr:expr};
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SimpleExpr() {
        var cacheKey = "SimpleExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_NEW();
        if (result0 !== null) {
          result1 = parse_ClassTemplate();
          if (result1 === null) {
            result1 = parse_TemplateBody();
          }
          if (result1 !== null) {
            result2 = parse_DOT();
            if (result2 !== null) {
              result3 = parse_id();
              if (result3 !== null) {
                result4 = parse__SimpleExpr1();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, arg, id, se1) {return {type:"InstanceCreationExpressionWithId", arg:arg, id:id, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_NEW();
          if (result0 !== null) {
            result1 = parse_ClassTemplate();
            if (result1 === null) {
              result1 = parse_TemplateBody();
            }
            if (result1 !== null) {
              result2 = parse_TypeArgs();
              if (result2 !== null) {
                result3 = parse__SimpleExpr1();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, arg, ta, se1) {return {type:"InstanceCreationExpressionWithTypes", arg:arg, types:ta, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_NEW();
            if (result0 !== null) {
              result1 = parse_ClassTemplate();
              if (result1 === null) {
                result1 = parse_TemplateBody();
              }
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, arg) {
            	return {type:"InstanceCreationExpression", arg:arg};
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_SimpleExpr1();
              if (result0 !== null) {
                result1 = parse_UNDER();
                result1 = result1 !== null ? result1 : "";
                if (result1 !== null) {
                  result0 = [result0, result1];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, expr, ud) {
              	return {type:"SimpleExpression", expr:expr, under:ftr(ud)};
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_BlockExpr();
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SimpleExpr1() {
        var cacheKey = "SimpleExpr1@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPPAREN();
        if (result0 !== null) {
          result1 = parse_Exprs();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_CLPAREN();
            if (result2 !== null) {
              result3 = parse__SimpleExpr1();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, exp, se1) {return {type:"TupleExpression", expr:exp, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_NEW();
          if (result0 !== null) {
            result1 = parse_ClassTemplate();
            if (result1 === null) {
              result1 = parse_TemplateBody();
            }
            if (result1 !== null) {
              result2 = parse_DOT();
              if (result2 !== null) {
                result3 = parse_id();
                if (result3 !== null) {
                  result4 = parse__SimpleExpr1();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, arg, id, se1) {return {type:"InstanceCreationExpressionWithId", arg:arg, id:id, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3], result0[4]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_NEW();
            if (result0 !== null) {
              result1 = parse_ClassTemplate();
              if (result1 === null) {
                result1 = parse_TemplateBody();
              }
              if (result1 !== null) {
                result2 = parse_TypeArgs();
                if (result2 !== null) {
                  result3 = parse__SimpleExpr1();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, arg, ta, se1) {return {type:"InstanceCreationExpressionWithTypes", arg:arg, types:ta, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_BlockExpr();
              if (result0 !== null) {
                result1 = parse_DOT();
                if (result1 !== null) {
                  result2 = parse_id();
                  if (result2 !== null) {
                    result3 = parse__SimpleExpr1();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, bk, id, se1) {return {type:"blockExpressionWithId", block:bk, id:id, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_BlockExpr();
                if (result0 !== null) {
                  result1 = parse_TypeArgs();
                  if (result1 !== null) {
                    result2 = parse__SimpleExpr1();
                    if (result2 !== null) {
                      result0 = [result0, result1, result2];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, bk, ta, se1) {return {type:"blockExpressionWithTypes", block:bk, types:ta, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  pos0 = clone(pos);
                  pos1 = clone(pos);
                  result0 = parse_XmlExpr();
                  if (result0 !== null) {
                    result1 = parse__SimpleExpr1();
                    if (result1 !== null) {
                      result0 = [result0, result1];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                  if (result0 !== null) {
                    result0 = (function(offset, line, column, xml, se1) {return {type:"XmlSimpleExpression", xml:xml, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                  }
                  if (result0 === null) {
                    pos = clone(pos0);
                  }
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_id();
                    if (result0 !== null) {
                      pos2 = clone(pos);
                      reportFailures++;
                      result1 = parse_EQUAL();
                      reportFailures--;
                      if (result1 === null) {
                        result1 = "";
                      } else {
                        result1 = null;
                        pos = clone(pos2);
                      }
                      if (result1 !== null) {
                        result2 = parse__SimpleExpr1();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, path, se1) {return {type:"idSeqSimpleExpression", ids:path, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      pos0 = clone(pos);
                      pos1 = clone(pos);
                      result0 = parse_Literal();
                      if (result0 !== null) {
                        result1 = parse__SimpleExpr1();
                        if (result1 !== null) {
                          result0 = [result0, result1];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                      if (result0 !== null) {
                        result0 = (function(offset, line, column, lt, se1) {return {type:"literalSimpleExpression", literal:lt, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
                      }
                      if (result0 === null) {
                        pos = clone(pos0);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse__SimpleExpr1() {
        var cacheKey = "_SimpleExpr1@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_UNDER();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          pos3 = clone(pos);
          result1 = parse_DOT();
          if (result1 !== null) {
            result2 = parse_id();
            if (result2 !== null) {
              result3 = parse_EQUAL();
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos3);
              }
            } else {
              result1 = null;
              pos = clone(pos3);
            }
          } else {
            result1 = null;
            pos = clone(pos3);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result2 = parse_DOT();
            if (result2 !== null) {
              result3 = parse_id();
              if (result3 !== null) {
                result4 = parse__SimpleExpr1();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ud, id, se1) {return {type:"DesignatorPostfix", under:ftr(ud), id:id, postfix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_UNDER();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_TypeArgs();
            if (result1 !== null) {
              result2 = parse__SimpleExpr1();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, ud, ta, se1) {return {type:"TypeApplicationPostfix", under:ftr(ud), typeArgument:ta, postfix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_UNDER();
            if (result0 !== null) {
              result1 = parse__SimpleExpr1();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, ud, se1) {return {type:"SimpleExpression", expr:ud, suffix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_ArgumentExprs();
              if (result0 !== null) {
                pos2 = clone(pos);
                reportFailures++;
                result1 = parse_EQUAL();
                reportFailures--;
                if (result1 === null) {
                  result1 = "";
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
                if (result1 !== null) {
                  result2 = parse__SimpleExpr1();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, ae, se1) {return {type:"FunctionApplicationPostfix", argument:ae, postfix:se1}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                result0 = parse_Empty();
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Exprs() {
        var cacheKey = "Exprs@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Expr();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_Expr();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_Expr();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, expr, exprs) {
              var result = [expr];
        	  for (var i = 0; i < exprs.length; i++) {
                result.push(exprs[i][1]);
        	  }
        	  return {type:"Exprs", contents:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ArgumentExprs() {
        var cacheKey = "ArgumentExprs@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPPAREN();
        if (result0 !== null) {
          result1 = parse_Exprs();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_CLPAREN();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, exprs) {return {type:"ArgumentExpression", exprs:ftr(exprs)}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_OPPAREN();
          if (result0 !== null) {
            pos2 = clone(pos);
            result1 = parse_Exprs();
            if (result1 !== null) {
              result2 = parse_COMMA();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_PostfixExpr();
              if (result2 !== null) {
                result3 = parse_COLON();
                if (result3 !== null) {
                  result4 = parse_UNDER();
                  if (result4 !== null) {
                    result5 = parse_STAR();
                    if (result5 !== null) {
                      result6 = parse_CLPAREN();
                      if (result6 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, exprs, pfe) {return {type:"ArgumentExprsWithRepeated", exprs:ftr(exprs, 0), postfixExpr:pfe}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_nl();
            result0 = result0 !== null ? result0 : "";
            if (result0 !== null) {
              result1 = parse_BlockExpr();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, block) {return block; })(pos0.offset, pos0.line, pos0.column, result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_BlockExpr() {
        var cacheKey = "BlockExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACE();
        if (result0 !== null) {
          result1 = parse_CaseClauses();
          if (result1 !== null) {
            result2 = parse_CLBRACE();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, block) {return {type: "PatternMatchingAnonymousFunction", block:block};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_OPBRACE();
          if (result0 !== null) {
            result1 = parse_Block();
            if (result1 !== null) {
              result2 = parse_CLBRACE();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, block) {return {type: "BlockExpression", block:block}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Block() {
        var cacheKey = "Block@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        pos2 = clone(pos);
        result1 = parse_BlockStat();
        if (result1 !== null) {
          result2 = parse_semi();
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        } else {
          result1 = null;
          pos = clone(pos2);
        }
        while (result1 !== null) {
          result0.push(result1);
          pos2 = clone(pos);
          result1 = parse_BlockStat();
          if (result1 !== null) {
            result2 = parse_semi();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        }
        if (result0 !== null) {
          result1 = parse_ResultExpr();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, blocks, res) {
              var result = [];
        	  for (var i = 0; i < blocks.length; i++) {
                result.push(blocks[i][0]);
        	  }
        	  return {type:"Block", states:result,res:ftr(res)};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_BlockStat() {
        var cacheKey = "BlockStat@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_Import();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          result1 = parse_Annotation();
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_Annotation();
          }
          if (result0 !== null) {
            result1 = parse_IMPLICIT();
            if (result1 === null) {
              result1 = parse_LAZY();
            }
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_Def();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, an, md, def) {return {type:"BlockStat", annotations:an, modifier:ftr(md), def:def}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = [];
            result1 = parse_Annotation();
            while (result1 !== null) {
              result0.push(result1);
              result1 = parse_Annotation();
            }
            if (result0 !== null) {
              result1 = [];
              result2 = parse_LocalModifier();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_LocalModifier();
              }
              if (result1 !== null) {
                result2 = parse_TmplDef();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, an, lm, td) {return {type:"BlockStat", annotations:an, modifier:lm, def:td}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_Expr1();
              if (result0 === null) {
                result0 = parse_Empty();
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ResultExpr() {
        var cacheKey = "ResultExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Bindings();
        if (result0 === null) {
          pos2 = clone(pos);
          pos3 = clone(pos);
          result0 = parse_IMPLICIT();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_id();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos3);
            }
          } else {
            result0 = null;
            pos = clone(pos3);
          }
          if (result0 === null) {
            result0 = parse_UNDER();
          }
          if (result0 !== null) {
            result1 = parse_COLON();
            if (result1 !== null) {
              result2 = parse_CompoundType();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos2);
              }
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        }
        if (result0 !== null) {
          result1 = parse_ARROW();
          if (result1 !== null) {
            result2 = parse_Block();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, left, right) {return {type:"AnonymousFunction", left:left, right:right}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Expr1();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Enumerators() {
        var cacheKey = "Enumerators@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Generator();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_semi();
          if (result2 !== null) {
            result3 = parse_Enumerator();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_semi();
            if (result2 !== null) {
              result3 = parse_Enumerator();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, gen, enums) {
              var result = [];
        	  for (var i = 0; i < enums.length; i++) {
                result.push(enums[i][1]);
        	  }
        	  return {type:"Enumerators", gen:gen, enums:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Enumerator() {
        var cacheKey = "Enumerator@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        result0 = parse_Generator();
        if (result0 === null) {
          result0 = parse_Guard();
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_VAL();
            if (result0 !== null) {
              result1 = parse_Pattern1();
              if (result1 !== null) {
                result2 = parse_EQUAL();
                if (result2 !== null) {
                  result3 = parse_Expr();
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, pt1, exp) {return {type:"Enumerator", left:pt1, right:exp}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Generator() {
        var cacheKey = "Generator@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Pattern1();
        if (result0 !== null) {
          if (input.substr(pos.offset, 2) === "<-") {
            result1 = "<-";
            advance(pos, 2);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"<-\"");
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_Expr();
              if (result3 !== null) {
                result4 = parse_Guard();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pt1, expr, guard) {return {type: "Generator", pt1:pt1, expr:expr, guard:guard}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CaseClauses() {
        var cacheKey = "CaseClauses@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0;
        
        pos0 = clone(pos);
        result1 = parse_CaseClause();
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_CaseClause();
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cls) {return {type: "CaseClauses", cls:cls};})(pos0.offset, pos0.line, pos0.column, result0);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CaseClause() {
        var cacheKey = "CaseClause@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_CASE();
        if (result0 !== null) {
          result1 = parse_Pattern();
          if (result1 !== null) {
            result2 = parse_Guard();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_ARROW();
              if (result3 !== null) {
                result4 = parse_Block();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pt, guard, block) {return {type: "Generator", pt:pt, guard:ftr(guard), block:block}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Guard() {
        var cacheKey = "Guard@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_IF();
        if (result0 !== null) {
          result1 = parse_PostfixExpr();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, postfix) {return {type: "Guard", postfix:postfix};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Pattern() {
        var cacheKey = "Pattern@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Pattern1();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          if (input.charCodeAt(pos.offset) === 124) {
            result2 = "|";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"|\"");
            }
          }
          if (result2 !== null) {
            result3 = parse___();
            if (result3 !== null) {
              result4 = parse_Pattern1();
              if (result4 !== null) {
                result2 = [result2, result3, result4];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            if (input.charCodeAt(pos.offset) === 124) {
              result2 = "|";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"|\"");
              }
            }
            if (result2 !== null) {
              result3 = parse___();
              if (result3 !== null) {
                result4 = parse_Pattern1();
                if (result4 !== null) {
                  result2 = [result2, result3, result4];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pt1, pt1s) {
              var result = [pt1];
        	  for (var i = 0; i < pt1s.length; i++) {
                result.push(pt1s[i][2]);
        	  }
        	  return {type:"PatternAlternatives", pts:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Pattern1() {
        var cacheKey = "Pattern1@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_varid();
        if (result0 !== null) {
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tp) {return {type: "TypedPattern", id:id, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_UNDER();
          if (result0 !== null) {
            result1 = parse_COLON();
            if (result1 !== null) {
              result2 = parse_Type();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, id, tp) {return {type: "TypedPattern", id:id, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_Pattern2();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Pattern2() {
        var cacheKey = "Pattern2@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_varid();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_AT();
          if (result1 !== null) {
            result2 = parse_Pattern3();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, pt) {return {type: "PatternBinder", id:id, pt:pt!== ""? pt[1] : null};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Pattern3();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Pattern3() {
        var cacheKey = "Pattern3@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_SimplePattern();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          pos3 = clone(pos);
          reportFailures++;
          result2 = parse_EQUAL();
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos3);
          }
          if (result2 !== null) {
            result3 = parse_id();
            if (result3 !== null) {
              result4 = parse_nl();
              result4 = result4 !== null ? result4 : "";
              if (result4 !== null) {
                result5 = parse_SimplePattern();
                if (result5 !== null) {
                  result2 = [result2, result3, result4, result5];
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            pos3 = clone(pos);
            reportFailures++;
            result2 = parse_EQUAL();
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos3);
            }
            if (result2 !== null) {
              result3 = parse_id();
              if (result3 !== null) {
                result4 = parse_nl();
                result4 = result4 !== null ? result4 : "";
                if (result4 !== null) {
                  result5 = parse_SimplePattern();
                  if (result5 !== null) {
                    result2 = [result2, result3, result4, result5];
                  } else {
                    result2 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result2 = null;
                  pos = clone(pos2);
                }
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tails) {
              var ids = [], cts = [];
        	for (var i = 0; i < tails.length; i++) {
                ids.push(tails[i][0]);
                cts.push(tails[i][2]);
        	  }	  return {type:"InfixOperatorPattern", SimplePattern:head, ids:ids, SimplePatterns:cts};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SimplePattern() {
        var cacheKey = "SimplePattern@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        result0 = parse_UNDER();
        if (result0 === null) {
          result0 = parse_varid();
          if (result0 === null) {
            result0 = parse_Literal();
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_StableId();
              if (result0 !== null) {
                result1 = parse_OPPAREN();
                if (result1 !== null) {
                  result2 = parse_Patterns();
                  result2 = result2 !== null ? result2 : "";
                  if (result2 !== null) {
                    result3 = parse_CLPAREN();
                    if (result3 !== null) {
                      result0 = [result0, result1, result2, result3];
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, si, pts) {return {type: "ConstructorPattern", id:si, pattern:pts};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
              if (result0 === null) {
                pos0 = clone(pos);
                pos1 = clone(pos);
                result0 = parse_StableId();
                if (result0 !== null) {
                  result1 = parse_OPPAREN();
                  if (result1 !== null) {
                    pos2 = clone(pos);
                    result2 = parse_Patterns();
                    if (result2 !== null) {
                      result3 = parse_COMMA();
                      if (result3 !== null) {
                        result2 = [result2, result3];
                      } else {
                        result2 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result2 = null;
                      pos = clone(pos2);
                    }
                    result2 = result2 !== null ? result2 : "";
                    if (result2 !== null) {
                      pos2 = clone(pos);
                      result3 = parse_varid();
                      if (result3 !== null) {
                        result4 = parse_AT();
                        if (result4 !== null) {
                          result3 = [result3, result4];
                        } else {
                          result3 = null;
                          pos = clone(pos2);
                        }
                      } else {
                        result3 = null;
                        pos = clone(pos2);
                      }
                      result3 = result3 !== null ? result3 : "";
                      if (result3 !== null) {
                        result4 = parse_UNDER();
                        if (result4 !== null) {
                          result5 = parse_STAR();
                          if (result5 !== null) {
                            result6 = parse_CLPAREN();
                            if (result6 !== null) {
                              result0 = [result0, result1, result2, result3, result4, result5, result6];
                            } else {
                              result0 = null;
                              pos = clone(pos1);
                            }
                          } else {
                            result0 = null;
                            pos = clone(pos1);
                          }
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
                if (result0 !== null) {
                  result0 = (function(offset, line, column, id, pts, vi) {return {type: "PatternSequences", id:si, pattern:ftr(pts, 0), varid:ftr(vi, 0)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2], result0[3]);
                }
                if (result0 === null) {
                  pos = clone(pos0);
                }
                if (result0 === null) {
                  result0 = parse_StableId();
                  if (result0 === null) {
                    pos0 = clone(pos);
                    pos1 = clone(pos);
                    result0 = parse_OPPAREN();
                    if (result0 !== null) {
                      result1 = parse_Patterns();
                      result1 = result1 !== null ? result1 : "";
                      if (result1 !== null) {
                        result2 = parse_CLPAREN();
                        if (result2 !== null) {
                          result0 = [result0, result1, result2];
                        } else {
                          result0 = null;
                          pos = clone(pos1);
                        }
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                    if (result0 !== null) {
                      result0 = (function(offset, line, column, pts) {return {type: "TuplePattern", id:null, pattern:ftr(pts)};})(pos0.offset, pos0.line, pos0.column, result0[1]);
                    }
                    if (result0 === null) {
                      pos = clone(pos0);
                    }
                    if (result0 === null) {
                      result0 = parse_XmlPattern();
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Patterns() {
        var cacheKey = "Patterns@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Pattern();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_COMMA();
          if (result1 !== null) {
            result2 = parse_Patterns();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {return {type: "Patterns", pattern:[head, tail]};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_UNDER();
          if (result0 !== null) {
            result1 = parse_STAR();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, ud, st) {return {type: "Patterns", pattern:[ud, st]};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeParamClause() {
        var cacheKey = "TypeParamClause@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACKET();
        if (result0 !== null) {
          result1 = parse_VariantTypeParam();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_COMMA();
            if (result3 !== null) {
              result4 = parse_VariantTypeParam();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_COMMA();
              if (result3 !== null) {
                result4 = parse_VariantTypeParam();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result3 = parse_CLBRACKET();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, param, params) {
              var result = [param];
        	  for (var i = 0; i < params.length; i++) {
                result.push(params[i][1]);
        	  }
        	  return {type:"TypeParamClause", params:result};
            })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_FunTypeParamClause() {
        var cacheKey = "FunTypeParamClause@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACKET();
        if (result0 !== null) {
          result1 = parse_TypeParam();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_COMMA();
            if (result3 !== null) {
              result4 = parse_TypeParam();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_COMMA();
              if (result3 !== null) {
                result4 = parse_TypeParam();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result3 = parse_CLBRACKET();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, param, params) {
              var result = [param];
        	  for (var i = 0; i < params.length; i++) {
                result.push(params[i][1]);
        	  }
        	  return {type:"FunTypeParamClause", params:result};
            })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_VariantTypeParam() {
        var cacheKey = "VariantTypeParam@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_Annotation();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Annotation();
        }
        if (result0 !== null) {
          result1 = parse_PLUS();
          if (result1 === null) {
            result1 = parse_HYPHEN();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TypeParam();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ans, sign, param) {return {type: "VariantTypeParam", annotations:ans, sign:sign, param:param};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeParam() {
        var cacheKey = "TypeParam@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 === null) {
          result0 = parse_UNDER();
        }
        if (result0 !== null) {
          result1 = parse_TypeParamClause();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_LEFTANGLE();
            if (result2 !== null) {
              result3 = parse_Type();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = clone(pos);
              result3 = parse_RIGHTANGLE();
              if (result3 !== null) {
                result4 = parse_Type();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = [];
                pos2 = clone(pos);
                if (input.substr(pos.offset, 2) === "<%") {
                  result5 = "<%";
                  advance(pos, 2);
                } else {
                  result5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"<%\"");
                  }
                }
                if (result5 !== null) {
                  result6 = parse___();
                  if (result6 !== null) {
                    result7 = parse_Type();
                    if (result7 !== null) {
                      result5 = [result5, result6, result7];
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result5 = null;
                  pos = clone(pos2);
                }
                while (result5 !== null) {
                  result4.push(result5);
                  pos2 = clone(pos);
                  if (input.substr(pos.offset, 2) === "<%") {
                    result5 = "<%";
                    advance(pos, 2);
                  } else {
                    result5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"<%\"");
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse___();
                    if (result6 !== null) {
                      result7 = parse_Type();
                      if (result7 !== null) {
                        result5 = [result5, result6, result7];
                      } else {
                        result5 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  pos2 = clone(pos);
                  result6 = parse_COLON();
                  if (result6 !== null) {
                    result7 = parse_Type();
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result6 = null;
                    pos = clone(pos2);
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos2 = clone(pos);
                    result6 = parse_COLON();
                    if (result6 !== null) {
                      result7 = parse_Type();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos2);
                    }
                  }
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, cl, tp1, tp2, tp3, tp4) {return {type: "TypeParam", id:id, clause:cl,type1:tp1, type2:tp2, type3:tp3, type4:tp4};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ParamClauses() {
        var cacheKey = "ParamClauses@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ParamClause();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ParamClause();
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_nl();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_OPPAREN();
            if (result2 !== null) {
              result3 = parse_IMPLICIT();
              if (result3 !== null) {
                result4 = parse_Params();
                if (result4 !== null) {
                  result5 = parse_CLPAREN();
                  if (result5 !== null) {
                    result1 = [result1, result2, result3, result4, result5];
                  } else {
                    result1 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pc, pm) {return {type: "ParamClauses", clauses:pc, params:pm !== ""? pm[3] : null};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ParamClause() {
        var cacheKey = "ParamClause@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_nl();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_OPPAREN();
          if (result1 !== null) {
            result2 = parse_Params();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_CLPAREN();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, pm) {return {type: "ParamClause", params:pm !== ""? pm : null};})(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Params() {
        var cacheKey = "Params@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Param();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_Param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_Param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, param, params) {
              var result = [param];
        	  for (var i = 0; i < params.length; i++) {
                result.push(params[i][1]);
        	  }
        	  return {type:"Params", params:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Param() {
        var cacheKey = "Param@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_Annotation();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Annotation();
        }
        if (result0 !== null) {
          result1 = parse_id();
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_COLON();
            if (result2 !== null) {
              result3 = parse_ParamType();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = clone(pos);
              result3 = parse_EQUAL();
              if (result3 !== null) {
                result4 = parse_Expr();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, an, id, pt, expr) {return {type:"Param", annotations:an, id:id, paramType:ftr(pt, 1), expr:expr}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ParamType() {
        var cacheKey = "ParamType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ARROW();
        if (result0 !== null) {
          result1 = parse_Type();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ar, tp) {return {type:"ParamType", allow:ar, tp:tp, star:null}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_Type();
          if (result0 !== null) {
            result1 = parse_STAR();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, tp, st) {return {type:"ParamType", allow:null, tp:tp, star:ftr(st)}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassParamClauses() {
        var cacheKey = "ClassParamClauses@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_ClassParamClause();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_ClassParamClause();
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_nl();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_OPPAREN();
            if (result2 !== null) {
              result3 = parse_IMPLICIT();
              if (result3 !== null) {
                result4 = parse_ClassParams();
                if (result4 !== null) {
                  result5 = parse_CLPAREN();
                  if (result5 !== null) {
                    result1 = [result1, result2, result3, result4, result5];
                  } else {
                    result1 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result1 = null;
                  pos = clone(pos2);
                }
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cls, params) {return {type:"ClassParamClauses", cls:cls, params:params !== ""? params[3] : null}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassParamClause() {
        var cacheKey = "ClassParamClause@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_nl();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_OPPAREN();
          if (result1 !== null) {
            result2 = parse_ClassParams();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_CLPAREN();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cp) {return {type:"ClassParamClause", params:ftr(cp)}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassParams() {
        var cacheKey = "ClassParams@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ClassParam();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          if (input.charCodeAt(pos.offset) === 32) {
            result2 = " ";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\" \"");
            }
          }
          if (result2 !== null) {
            result3 = parse_ClassParam();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            if (input.charCodeAt(pos.offset) === 32) {
              result2 = " ";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result2 !== null) {
              result3 = parse_ClassParam();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, param, params) {
              var result = [param];
        	  for (var i = 0; i < params.length; i++) {
                result.push(params[i][1]);
        	  }
        	  return {type:"ClassParams", params:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassParam() {
        var cacheKey = "ClassParam@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        result1 = parse_Annotation();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Annotation();
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = [];
          result2 = parse_Modifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Modifier();
          }
          if (result1 !== null) {
            result2 = parse_VAL();
            if (result2 === null) {
              result2 = parse_VAR();
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_id();
            if (result2 !== null) {
              result3 = parse_COLON();
              if (result3 !== null) {
                result4 = parse_ParamType();
                if (result4 !== null) {
                  pos2 = clone(pos);
                  result5 = parse_EQUAL();
                  if (result5 !== null) {
                    result6 = parse_Expr();
                    if (result6 !== null) {
                      result5 = [result5, result6];
                    } else {
                      result5 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result5 = null;
                    pos = clone(pos2);
                  }
                  result5 = result5 !== null ? result5 : "";
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, an, md, id, pt, exp) {return {type:"ClassParam", annotations:an, modifier:ftr(md, 0), vax:ftr(md, 1), id:id, paramType:pt, exp:ftr(exp, 1)}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Bindings() {
        var cacheKey = "Bindings@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPPAREN();
        if (result0 !== null) {
          result1 = parse_Binding();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_COMMA();
            if (result3 !== null) {
              result4 = parse_Binding();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_COMMA();
              if (result3 !== null) {
                result4 = parse_Binding();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result3 = parse_CLPAREN();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, bd, bds) {
              var result = [bd];
        	  for (var i = 0; i < bds.length; i++) {
                result.push(bds[i][1]);
        	  }
        	  return {type:"Bindings", bindings:result};
            })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Binding() {
        var cacheKey = "Binding@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 === null) {
          result0 = parse_UNDER();
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tp) {return {type:"Bindings", id:id, tp:ftr(tp, 1)}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Modifier() {
        var cacheKey = "Modifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        result0 = parse_LocalModifier();
        if (result0 === null) {
          result0 = parse_AccessModifier();
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 8) === "override") {
              result0 = "override";
              advance(pos, 8);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"override\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) {return makeKeyword("override");})(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_LocalModifier() {
        var cacheKey = "LocalModifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "abstract") {
          result0 = "abstract";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"abstract\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return makeKeyword("abstract");})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          if (input.substr(pos.offset, 5) === "final") {
            result0 = "final";
            advance(pos, 5);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"final\"");
            }
          }
          if (result0 !== null) {
            result1 = parse___();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column) {return makeKeyword("final");})(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 6) === "sealed") {
              result0 = "sealed";
              advance(pos, 6);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"sealed\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column) {return makeKeyword("sealed");})(pos0.offset, pos0.line, pos0.column);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_IMPLICIT();
              if (result0 === null) {
                result0 = parse_LAZY();
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AccessModifier() {
        var cacheKey = "AccessModifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "private") {
          result0 = "private";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"private\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 9) === "protected") {
            result0 = "protected";
            advance(pos, 9);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"protected\"");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_AccessQualifier();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, md, qual) {return {type:"AccessModifier", modifier:makeKeyword(md), qualifier:ftr(qual)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AccessQualifier() {
        var cacheKey = "AccessQualifier@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACKET();
        if (result0 !== null) {
          result1 = parse_id();
          if (result1 === null) {
            result1 = parse_THIS();
          }
          if (result1 !== null) {
            result2 = parse_CLBRACKET();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id) {return {type:"AccessQualifier", id:id};})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Annotation() {
        var cacheKey = "Annotation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_AT();
        if (result0 !== null) {
          result1 = parse_SimpleType();
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ArgumentExprs();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ArgumentExprs();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, stype, exprs) {return {type:"Annotation", stype:tp, exprs:exprs};})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstrAnnotation() {
        var cacheKey = "ConstrAnnotation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_AT();
        if (result0 !== null) {
          result1 = parse_SimpleType();
          if (result1 !== null) {
            result2 = parse_ArgumentExprs();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tp, exprs) {return {type:"ConstrAnnotation", stype:tp, exprs:exprs};})(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_NameValuePair() {
        var cacheKey = "NameValuePair@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_VAL();
        if (result0 !== null) {
          result1 = parse_id();
          if (result1 !== null) {
            result2 = parse_EQUAL();
            if (result2 !== null) {
              result3 = parse_PrefixExpr();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, prefix) {return {type:"NameValuePair", id:id, prefix:prefix};})(pos0.offset, pos0.line, pos0.column, result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TemplateBody() {
        var cacheKey = "TemplateBody@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6, result7;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_nl();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_OPBRACE();
          if (result1 !== null) {
            result2 = parse_SelfType();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_nl();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_TemplateStat();
                if (result4 !== null) {
                  result5 = [];
                  pos2 = clone(pos);
                  result6 = parse_semi();
                  if (result6 !== null) {
                    result7 = parse_TemplateStat();
                    if (result7 !== null) {
                      result6 = [result6, result7];
                    } else {
                      result6 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result6 = null;
                    pos = clone(pos2);
                  }
                  while (result6 !== null) {
                    result5.push(result6);
                    pos2 = clone(pos);
                    result6 = parse_semi();
                    if (result6 !== null) {
                      result7 = parse_TemplateStat();
                      if (result7 !== null) {
                        result6 = [result6, result7];
                      } else {
                        result6 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result6 = null;
                      pos = clone(pos2);
                    }
                  }
                  if (result5 !== null) {
                    result6 = parse_nl();
                    result6 = result6 !== null ? result6 : "";
                    if (result6 !== null) {
                      result7 = parse_CLBRACE();
                      if (result7 !== null) {
                        result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
                      } else {
                        result0 = null;
                        pos = clone(pos1);
                      }
                    } else {
                      result0 = null;
                      pos = clone(pos1);
                    }
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tp, ts, tss) {
              var result = [ts];
        	  for (var i = 0; i < tss.length; i++) {
                result.push(tss[i][1]);
        	  }
        	  return {type:"TemplateBody", selftype:ftr(tp), states:result};
            })(pos0.offset, pos0.line, pos0.column, result0[2], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TemplateStat() {
        var cacheKey = "TemplateStat@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        result0 = parse_Import();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = [];
          pos2 = clone(pos);
          result1 = parse_Annotation();
          if (result1 !== null) {
            result2 = parse_nl();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          while (result1 !== null) {
            result0.push(result1);
            pos2 = clone(pos);
            result1 = parse_Annotation();
            if (result1 !== null) {
              result2 = parse_nl();
              result2 = result2 !== null ? result2 : "";
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_Modifier();
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_Modifier();
            }
            if (result1 !== null) {
              result2 = parse_Def();
              if (result2 === null) {
                result2 = parse_Dcl();
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, ats, modifier, def) {
                var result = [];
          	  for (var i = 0; i < ats.length; i++) {
                  result.push(ats[i][0]);
          	  }
          	  return {type:"TemplateStatement", annotation:result, modifier:modifier, definition:def};
              })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_Expr();
            if (result0 === null) {
              result0 = parse_Empty();
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SelfType() {
        var cacheKey = "SelfType@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_ARROW();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tp) {return {type:"SelfType", id:id, tp:ftr(tp,1)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_THIS();
          if (result0 !== null) {
            result1 = parse_COLON();
            if (result1 !== null) {
              result2 = parse_Type();
              if (result2 !== null) {
                result3 = parse_ARROW();
                if (result3 !== null) {
                  result0 = [result0, result1, result2, result3];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, id, tp) {return {type:"SelfType", id:id, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Import() {
        var cacheKey = "Import@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "import") {
          result0 = "import";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"import\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result2 = parse_ImportExpr();
            if (result2 !== null) {
              result3 = [];
              pos2 = clone(pos);
              result4 = parse_COMMA();
              if (result4 !== null) {
                result5 = parse_ImportExpr();
                if (result5 !== null) {
                  result4 = [result4, result5];
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              } else {
                result4 = null;
                pos = clone(pos2);
              }
              while (result4 !== null) {
                result3.push(result4);
                pos2 = clone(pos);
                result4 = parse_COMMA();
                if (result4 !== null) {
                  result5 = parse_ImportExpr();
                  if (result5 !== null) {
                    result4 = [result4, result5];
                  } else {
                    result4 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result4 = null;
                  pos = clone(pos2);
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {
        	var result = [head];
        	for (var i = 0; i < tail.length; i++) {
        		result.push(tail[i][1]);
        	}
        	return {type:"ImportStatement", exprs:result};
        })(pos0.offset, pos0.line, pos0.column, result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ImportExpr() {
        var cacheKey = "ImportExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_StableId();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_DOT();
          if (result1 !== null) {
            result2 = parse_UNDER();
            if (result2 === null) {
              result2 = parse_ImportSelectors();
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, sel) {return {type:"ImportExpr", id:id, selector:ftr(sel,1)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ImportSelectors() {
        var cacheKey = "ImportSelectors@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACE();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_ImportSelector();
          if (result2 !== null) {
            result3 = parse_COMMA();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_ImportSelector();
            if (result2 !== null) {
              result3 = parse_COMMA();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result2 = parse_ImportSelector();
            if (result2 === null) {
              result2 = parse_UNDER();
            }
            if (result2 !== null) {
              result3 = parse_CLBRACE();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, heads, tail) {
        	var result = [];
        	for (var i = 0; i < heads.length; i++) {
        		result.push(heads[i][0]);
        	}
        	result.push(tail);
        	return {type:"ImportSelectors", selectors:result};
        })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ImportSelector() {
        var cacheKey = "ImportSelector@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_ARROW();
          if (result1 !== null) {
            result2 = parse_id();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 === null) {
            pos2 = clone(pos);
            result1 = parse_ARROW();
            if (result1 !== null) {
              result2 = parse_UNDER();
              if (result2 !== null) {
                result1 = [result1, result2];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, head, tail) {return {type:"ImportSelector", src:head, dest:ftr(tail,1)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Dcl() {
        var cacheKey = "Dcl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_VAL();
        if (result0 !== null) {
          result1 = parse_ValDcl();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, dcl, body) {return {type:"Declaration", dcl:dcl, body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_VAR();
          if (result0 !== null) {
            result1 = parse_VarDcl();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, dcl, body) {return {type:"Declaration", dcl:dcl, body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_DEF();
            if (result0 !== null) {
              result1 = parse_FunDcl();
              if (result1 !== null) {
                result0 = [result0, result1];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, dcl, body) {return {type:"Declaration", dcl:dcl, body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              pos0 = clone(pos);
              pos1 = clone(pos);
              result0 = parse_TYPE();
              if (result0 !== null) {
                result1 = [];
                result2 = parse_nl();
                while (result2 !== null) {
                  result1.push(result2);
                  result2 = parse_nl();
                }
                if (result1 !== null) {
                  result2 = parse_TypeDcl();
                  if (result2 !== null) {
                    result0 = [result0, result1, result2];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
              if (result0 !== null) {
                result0 = (function(offset, line, column, dcl, body) {return {type:"Declaration", dcl:dcl, body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
              }
              if (result0 === null) {
                pos = clone(pos0);
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ValDcl() {
        var cacheKey = "ValDcl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ids();
        if (result0 !== null) {
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tp) {return {type:"ValueDeclaration", id:id, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_VarDcl() {
        var cacheKey = "VarDcl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_ids();
        if (result0 !== null) {
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tp) {return {type:"VariableDeclaration", id:id, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_FunDcl() {
        var cacheKey = "FunDcl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_FunSig();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, sig, tp) {return {type:"FunctionDeclaration", signature:sig, tp:ftr(tp, 1)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_FunSig() {
        var cacheKey = "FunSig@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = parse_FunTypeParamClause();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_ParamClauses();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, funtype, param) {return {type:"FunctionSignature", id:id, funtype:ftr(funtype), param:param};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeDcl() {
        var cacheKey = "TypeDcl@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = parse_TypeParamClause();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_LEFTANGLE();
            if (result2 !== null) {
              result3 = parse_Type();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              pos2 = clone(pos);
              result3 = parse_RIGHTANGLE();
              if (result3 !== null) {
                result4 = parse_Type();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tpc, t1, t2) {return {type:"TypeDeclaration", id:id, typeparam:ftr(tpc), type1:ftr(t1), type2:ftr(t2)};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PatVarDef() {
        var cacheKey = "PatVarDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_VAL();
        if (result0 !== null) {
          result1 = parse_PatDef();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, dcl, body) {return {type:"PatValDef", body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_VAR();
          if (result0 !== null) {
            result1 = parse_VarDef();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, dcl, body) {return {type:"PatVarDef", body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Def() {
        var cacheKey = "Def@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        result0 = parse_PatVarDef();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_DEF();
          if (result0 !== null) {
            result1 = parse_FunDef();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, dcl, body) {return {type:"Definition", dcl:dcl, body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_TYPE();
            if (result0 !== null) {
              result1 = [];
              result2 = parse_nl();
              while (result2 !== null) {
                result1.push(result2);
                result2 = parse_nl();
              }
              if (result1 !== null) {
                result2 = parse_TypeDef();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, dcl, body) {return {type:"Definition", dcl:dcl, body:body};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
            if (result0 === null) {
              result0 = parse_TmplDef();
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PatDef() {
        var cacheKey = "PatDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Pattern2();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_COMMA();
          if (result2 !== null) {
            result3 = parse_Pattern2();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_COMMA();
            if (result2 !== null) {
              result3 = parse_Pattern2();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            pos2 = clone(pos);
            result2 = parse_COLON();
            if (result2 !== null) {
              result3 = parse_Type();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_EQUAL();
              if (result3 !== null) {
                result4 = parse_Expr();
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ptn, ptns, tp, expr) {
        	var result = [ptn];
        	for (var i = 0; i < ptns.length; i++) {
        		result.push(ptns[i][1]);
        	}
        	return {type:"PatDef", patterns:result, tp:ftr(tp, 1), expr:expr};
        })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_VarDef() {
        var cacheKey = "VarDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        result0 = parse_PatDef();
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_ids();
          if (result0 !== null) {
            result1 = parse_COLON();
            if (result1 !== null) {
              result2 = parse_Type();
              if (result2 !== null) {
                result3 = parse_EQUAL();
                if (result3 !== null) {
                  result4 = parse_UNDER();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, id, tp) {return {type:"VarDef", ids:id, tp:tp};})(pos0.offset, pos0.line, pos0.column, result0[0], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_FunDef() {
        var cacheKey = "FunDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_FunSig();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_COLON();
          if (result1 !== null) {
            result2 = parse_Type();
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_EQUAL();
            if (result2 !== null) {
              result3 = parse_Expr();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, fs, tp, exp) {return {type:"FunctionDefinition", signature:fs, tp:ftr(tp), expr:exp}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_FunSig();
          if (result0 !== null) {
            result1 = parse_nl();
            result1 = result1 !== null ? result1 : "";
            if (result1 !== null) {
              result2 = parse_OPBRACE();
              if (result2 !== null) {
                result3 = parse_Block();
                if (result3 !== null) {
                  result4 = parse_CLBRACE();
                  if (result4 !== null) {
                    result0 = [result0, result1, result2, result3, result4];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, fs, bk) {return {type:"Procedure", signature:fs, block:bk}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            result0 = parse_THIS();
            if (result0 !== null) {
              result1 = parse_ParamClause();
              if (result1 !== null) {
                result2 = parse_ParamClauses();
                if (result2 !== null) {
                  pos2 = clone(pos);
                  result3 = parse_EQUAL();
                  if (result3 !== null) {
                    result4 = parse_ConstrExpr();
                    if (result4 !== null) {
                      result3 = [result3, result4];
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                  if (result3 === null) {
                    pos2 = clone(pos);
                    result3 = parse_nl();
                    result3 = result3 !== null ? result3 : "";
                    if (result3 !== null) {
                      result4 = parse_ConstrBlock();
                      if (result4 !== null) {
                        result3 = [result3, result4];
                      } else {
                        result3 = null;
                        pos = clone(pos2);
                      }
                    } else {
                      result3 = null;
                      pos = clone(pos2);
                    }
                  }
                  if (result3 !== null) {
                    result0 = [result0, result1, result2, result3];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, pc, pcs, body) {return {type:"ConstructorDefinition", param:pc, params:pcs, body:body}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2], result0[3]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeDef() {
        var cacheKey = "TypeDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = parse_TypeParamClause();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_EQUAL();
            if (result2 !== null) {
              result3 = parse_Type();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, pm, tp) {return {type:"TypeDef", id:id, param:ftr(pm), tp:tp}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TmplDef() {
        var cacheKey = "TmplDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_CASE();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          if (input.substr(pos.offset, 5) === "class") {
            result1 = "class";
            advance(pos, 5);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"class\"");
            }
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result3 = parse_ClassDef();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cs, def) {return {type:"TemplateDefinition", prefix:[ftr(cs), makeKeyword("class")], def:def}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[3]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_CASE();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_OBJECT();
            if (result1 !== null) {
              result2 = parse_ObjectDef();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          if (result0 !== null) {
            result0 = (function(offset, line, column, cs, obj, def) {return {type:"TemplateDefinition", prefix:[ftr(cs), obj], def:def}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
          if (result0 === null) {
            pos0 = clone(pos);
            pos1 = clone(pos);
            if (input.substr(pos.offset, 5) === "trait") {
              result0 = "trait";
              advance(pos, 5);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"trait\"");
              }
            }
            if (result0 !== null) {
              result1 = parse___();
              if (result1 !== null) {
                result2 = parse_TraitDef();
                if (result2 !== null) {
                  result0 = [result0, result1, result2];
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
            if (result0 !== null) {
              result0 = (function(offset, line, column, def) {return {type:"TemplateDefinition", prefix:[makeKeyword("trait")], def:def}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
            }
            if (result0 === null) {
              pos = clone(pos0);
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassDef() {
        var cacheKey = "ClassDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = parse_TypeParamClause();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = [];
            result3 = parse_ConstrAnnotation();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_ConstrAnnotation();
            }
            if (result2 !== null) {
              result3 = parse_AccessModifier();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result4 = parse_ClassParamClauses();
                if (result4 !== null) {
                  result5 = parse_ClassTemplateOpt();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tpc, ca, am, cpc, cto) {return {type:"ClassDef", id:id, typeParam:ftr(tpc), annotation:ca, modifier:ftr(am), classParam:cpc, classTemplate:cto}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2], result0[3], result0[4], result0[5]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TraitDef() {
        var cacheKey = "TraitDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = parse_TypeParamClause();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_TraitTemplateOpt();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, tpc, tto) {return {type:"TraitDef", id:id, typeParam:tpc, traitTemplate:tto}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ObjectDef() {
        var cacheKey = "ObjectDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_id();
        if (result0 !== null) {
          result1 = parse_ClassTemplateOpt();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, id, cto) {return {type:"ObjectDefinition", id:id, classTemplate:cto}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassTemplateOpt() {
        var cacheKey = "ClassTemplateOpt@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_EXTENDS();
        if (result0 !== null) {
          result1 = parse_ClassTemplate();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ext, ct) {return {type:"ClassTemplateOpt", extend:ext, body:ct}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_EXTENDS();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_TemplateBody();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result0 = (function(offset, line, column, tmpl) {return {type:"ClassTemplateOpt", extend:ftr(ftr(tmpl, 0)), body:ftr(tmpl, 1)}; })(pos0.offset, pos0.line, pos0.column, result0);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TraitTemplateOpt() {
        var cacheKey = "TraitTemplateOpt@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_EXTENDS();
        if (result0 !== null) {
          result1 = parse_TraitTemplate();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ext, tt) {return {type:"TraitTemplateOpt", extend:ext, body:tt}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          pos1 = clone(pos);
          result0 = parse_EXTENDS();
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result1 = parse_TemplateBody();
            if (result1 !== null) {
              result0 = [result0, result1];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
          result0 = result0 !== null ? result0 : "";
          if (result0 !== null) {
            result0 = (function(offset, line, column) {return {type:"TraitTemplateOpt", extend:ftr(ftr(tmpl, 0)), body:ftr(tmpl, 1)}; })(pos0.offset, pos0.line, pos0.column);
          }
          if (result0 === null) {
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassTemplate() {
        var cacheKey = "ClassTemplate@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_EarlyDefs();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_ClassParents();
          if (result1 !== null) {
            result2 = parse_TemplateBody();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ed, cp, tb) {return {type:"ClassTemplate", def:ftr(ed), classParent:cp, body:ftr(tb)}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TraitTemplate() {
        var cacheKey = "TraitTemplate@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_EarlyDefs();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_TraitParents();
          if (result1 !== null) {
            result2 = parse_TemplateBody();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ed, tp, tb) {return {type:"TraitTemplate", def:ftr(ed), traitParent:tp, body:ftr(tb)}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ClassParents() {
        var cacheKey = "ClassParents@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_Constr();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_WITH();
          if (result2 !== null) {
            result3 = parse_AnnotType();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_WITH();
            if (result2 !== null) {
              result3 = parse_AnnotType();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, cst, ats) {return {type:"ClassParents", constr:cst, annotType:ats}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TraitParents() {
        var cacheKey = "TraitParents@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_AnnotType();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_WITH();
          if (result2 !== null) {
            result3 = parse_AnnotType();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_WITH();
            if (result2 !== null) {
              result3 = parse_AnnotType();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, at, ats) {return {type:"TraitParents", annotType:at, annotType:ats}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Constr() {
        var cacheKey = "Constr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_AnnotType();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_ArgumentExprs();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_ArgumentExprs();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, at, ae) {return {type:"Constr", annotType:at, exprs:ae}; })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EarlyDefs() {
        var cacheKey = "EarlyDefs@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACE();
        if (result0 !== null) {
          pos2 = clone(pos);
          result1 = parse_EarlyDef();
          if (result1 !== null) {
            result2 = [];
            pos3 = clone(pos);
            result3 = parse_semi();
            if (result3 !== null) {
              result4 = parse_EarlyDef();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            } else {
              result3 = null;
              pos = clone(pos3);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos3 = clone(pos);
              result3 = parse_semi();
              if (result3 !== null) {
                result4 = parse_EarlyDef();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
              } else {
                result3 = null;
                pos = clone(pos3);
              }
            }
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_CLBRACE();
            if (result2 !== null) {
              result3 = parse_WITH();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, eds) {
              var result = ftr(eds);
        	  if(eds !== null){
        		  for (var i = 0; i < eds[1].length; i++) {
        			  result.push(eds[1][i][1]);
        		  }
        	  }
        	  return {type:"EarlyDefs", earlyDefs:result};
            })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EarlyDef() {
        var cacheKey = "EarlyDef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        pos2 = clone(pos);
        result1 = parse_Annotation();
        if (result1 !== null) {
          result2 = parse_nl();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        } else {
          result1 = null;
          pos = clone(pos2);
        }
        while (result1 !== null) {
          result0.push(result1);
          pos2 = clone(pos);
          result1 = parse_Annotation();
          if (result1 !== null) {
            result2 = parse_nl();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Modifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Modifier();
          }
          if (result1 !== null) {
            result2 = parse_PatVarDef();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, an, md, pvd) {
              var result = [];
        	  for (var i = 0; i < an.length; i++) {
                result.push(an[i][0]);
        	  }
        	  return {type:"EarlyDef", annotation:an, modifier:md, def:pvd};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstrExpr() {
        var cacheKey = "ConstrExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_SelfInvocation();
        if (result0 === null) {
          result0 = parse_ConstrBlock();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ConstrBlock() {
        var cacheKey = "ConstrBlock@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_OPBRACE();
        if (result0 !== null) {
          result1 = parse_SelfInvocation();
          if (result1 !== null) {
            result2 = [];
            pos2 = clone(pos);
            result3 = parse_semi();
            if (result3 !== null) {
              result4 = parse_BlockStat();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            } else {
              result3 = null;
              pos = clone(pos2);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos2 = clone(pos);
              result3 = parse_semi();
              if (result3 !== null) {
                result4 = parse_BlockStat();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
            }
            if (result2 !== null) {
              result3 = parse_CLBRACE();
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, si, bss) {
              var result = [];
        	  for (var i = 0; i < bss.length; i++) {
                result.push(bss[i][1]);
        	  }
        	  return {type:"TypeParamClause", params:result};
            })(pos0.offset, pos0.line, pos0.column, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SelfInvocation() {
        var cacheKey = "SelfInvocation@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_THIS();
        if (result0 !== null) {
          result2 = parse_ArgumentExprs();
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_ArgumentExprs();
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, ae) {return {type:"SelfInvocation", exprs:ae}; })(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TopStatSeq() {
        var cacheKey = "TopStatSeq@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_TopStat();
        if (result0 !== null) {
          result1 = [];
          pos2 = clone(pos);
          result2 = parse_semi();
          if (result2 !== null) {
            result3 = parse_TopStat();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = clone(pos);
            result2 = parse_semi();
            if (result2 !== null) {
              result3 = parse_TopStat();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos2);
              }
            } else {
              result2 = null;
              pos = clone(pos2);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, tp, tps) {
              var result = [tp];
        	  for (var i = 0; i < tps.length; i++) {
                result.push(tps[i][1]);
        	  }
        	  return {type:"TopStatSeq", topstat:result};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TopStat() {
        var cacheKey = "TopStat@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = [];
        pos2 = clone(pos);
        result1 = parse_Annotation();
        if (result1 !== null) {
          result2 = parse_nl();
          result2 = result2 !== null ? result2 : "";
          if (result2 !== null) {
            result1 = [result1, result2];
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        } else {
          result1 = null;
          pos = clone(pos2);
        }
        while (result1 !== null) {
          result0.push(result1);
          pos2 = clone(pos);
          result1 = parse_Annotation();
          if (result1 !== null) {
            result2 = parse_nl();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result1 = [result1, result2];
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Modifier();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Modifier();
          }
          if (result1 !== null) {
            result2 = parse_TmplDef();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, an, md, td) {
              var result = [];
        	  for (var i = 0; i < an.length; i++) {
                result.push(an[i][0]);
        	  }
        	  return {type:"TopStat", annotation:an, modifier:md, def:td};
            })(pos0.offset, pos0.line, pos0.column, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        if (result0 === null) {
          result0 = parse_Import();
          if (result0 === null) {
            result0 = parse_Packaging();
            if (result0 === null) {
              result0 = parse_PackageObject();
              if (result0 === null) {
                result0 = parse_Empty();
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Packaging() {
        var cacheKey = "Packaging@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_PACKAGE();
        if (result0 !== null) {
          result1 = parse_QualId();
          if (result1 !== null) {
            result2 = parse_nl();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result3 = parse_OPBRACE();
              if (result3 !== null) {
                result4 = parse_TopStatSeq();
                if (result4 !== null) {
                  result5 = parse_CLBRACE();
                  if (result5 !== null) {
                    result0 = [result0, result1, result2, result3, result4, result5];
                  } else {
                    result0 = null;
                    pos = clone(pos1);
                  }
                } else {
                  result0 = null;
                  pos = clone(pos1);
                }
              } else {
                result0 = null;
                pos = clone(pos1);
              }
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, qi, tss) {return {type:"Packaging", qualId:qi, topStatseq:tss}; })(pos0.offset, pos0.line, pos0.column, result0[1], result0[4]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PackageObject() {
        var cacheKey = "PackageObject@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_PACKAGE();
        if (result0 !== null) {
          result1 = parse_OBJECT();
          if (result1 !== null) {
            result2 = parse_ObjectDef();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, od) {return {type:"PackageObject", def:od}; })(pos0.offset, pos0.line, pos0.column, result0[2]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_charEscapeSeq() {
        var cacheKey = "charEscapeSeq@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 2) === "\\b") {
          result0 = "\\b";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\b\"");
          }
        }
        if (result0 === null) {
          if (input.substr(pos.offset, 6) === "\\u0008") {
            result0 = "\\u0008";
            advance(pos, 6);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\u0008\"");
            }
          }
          if (result0 === null) {
            if (input.substr(pos.offset, 2) === "\\t") {
              result0 = "\\t";
              advance(pos, 2);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\t\"");
              }
            }
            if (result0 === null) {
              if (input.substr(pos.offset, 6) === "\\u0009") {
                result0 = "\\u0009";
                advance(pos, 6);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\u0009\"");
                }
              }
              if (result0 === null) {
                if (input.substr(pos.offset, 2) === "\\n") {
                  result0 = "\\n";
                  advance(pos, 2);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\\\n\"");
                  }
                }
                if (result0 === null) {
                  if (input.substr(pos.offset, 6) === "\\u000a") {
                    result0 = "\\u000a";
                    advance(pos, 6);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\\\u000a\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.substr(pos.offset, 2) === "\\f") {
                      result0 = "\\f";
                      advance(pos, 2);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\\\f\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.substr(pos.offset, 6) === "\\u000c") {
                        result0 = "\\u000c";
                        advance(pos, 6);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\\\u000c\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.substr(pos.offset, 2) === "\\r") {
                          result0 = "\\r";
                          advance(pos, 2);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\\\r\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.substr(pos.offset, 6) === "\\u000d") {
                            result0 = "\\u000d";
                            advance(pos, 6);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\\\u000d\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.substr(pos.offset, 2) === "\\\"") {
                              result0 = "\\\"";
                              advance(pos, 2);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"\\\\\\\"\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.substr(pos.offset, 6) === "\\u0022") {
                                result0 = "\\u0022";
                                advance(pos, 6);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"\\\\u0022\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.substr(pos.offset, 2) === "\\'") {
                                  result0 = "\\'";
                                  advance(pos, 2);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"\\\\'\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.substr(pos.offset, 6) === "\\u0027") {
                                    result0 = "\\u0027";
                                    advance(pos, 6);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"\\\\u0027\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos.offset) === 92) {
                                      result0 = "\\";
                                      advance(pos, 1);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"\\\\\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.substr(pos.offset, 6) === "\\u005c") {
                                        result0 = "\\u005c";
                                        advance(pos, 6);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"\\\\u005c\"");
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_hexDigit() {
        var cacheKey = "hexDigit@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[0-9A-Fa-f]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9A-Fa-f]");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_printableChar() {
        var cacheKey = "printableChar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        result0 = parse_charEscapeSeq();
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          if (input.length > pos.offset) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chr) {return chr;})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_printableCharNoDoubleQuote() {
        var cacheKey = "printableCharNoDoubleQuote@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          result1 = parse_printableChar();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chr) {return chr;})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_charNoDoubleQuote() {
        var cacheKey = "charNoDoubleQuote@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        pos2 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        if (result0 !== null) {
          if (input.length > pos.offset) {
            result1 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("any character");
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column, chr) {return chr;})(pos0.offset, pos0.line, pos0.column, result0[1]);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Empty() {
        var cacheKey = "Empty@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = (function(offset, line, column) {return true;})(pos.offset, pos.line, pos.column) ? "" : null;
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Empty"};})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PACKAGE() {
        var cacheKey = "PACKAGE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "package") {
          result0 = "package";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"package\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"package"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_SEMICOLON() {
        var cacheKey = "SEMICOLON@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 59) {
          result0 = ";";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:";"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_HYPHEN() {
        var cacheKey = "HYPHEN@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 45) {
          result0 = "-";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"-\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"-"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_DOT() {
        var cacheKey = "DOT@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 46) {
          result0 = ".";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\".\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"."}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_COMMA() {
        var cacheKey = "COMMA@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 44) {
          result0 = ",";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:","}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_THIS() {
        var cacheKey = "THIS@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "this") {
          result0 = "this";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"this\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"this"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_OPBRACKET() {
        var cacheKey = "OPBRACKET@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 91) {
          result0 = "[";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"["}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CLBRACKET() {
        var cacheKey = "CLBRACKET@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 93) {
          result0 = "]";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"]\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"]"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ARROW() {
        var cacheKey = "ARROW@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "=>") {
          result0 = "=>";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=>\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"=>"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_OPPAREN() {
        var cacheKey = "OPPAREN@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 40) {
          result0 = "(";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"("}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CLPAREN() {
        var cacheKey = "CLPAREN@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 41) {
          result0 = ")";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\")\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:")"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_OPBRACE() {
        var cacheKey = "OPBRACE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:String.fromCharCode(123)}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CLBRACE() {
        var cacheKey = "CLBRACE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 125) {
          result0 = "}";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"}\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:String.fromCharCode(125)}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_TYPE() {
        var cacheKey = "TYPE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "type") {
          result0 = "type";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"type\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"type"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_VAL() {
        var cacheKey = "VAL@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "val") {
          result0 = "val";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"val\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"val"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_WITH() {
        var cacheKey = "WITH@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "with") {
          result0 = "with";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"with\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"with"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_COLON() {
        var cacheKey = "COLON@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 58) {
          result0 = ":";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:":"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_UNDER() {
        var cacheKey = "UNDER@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 95) {
          result0 = "_";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"_\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"_"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_STAR() {
        var cacheKey = "STAR@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 42) {
          result0 = "*";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"*"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_IMPLICIT() {
        var cacheKey = "IMPLICIT@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 8) === "implicit") {
          result0 = "implicit";
          advance(pos, 8);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"implicit\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"implicit"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_IF() {
        var cacheKey = "IF@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "if") {
          result0 = "if";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"if"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_WHILE() {
        var cacheKey = "WHILE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 5) === "while") {
          result0 = "while";
          advance(pos, 5);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"while\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"while"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EQUAL() {
        var cacheKey = "EQUAL@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 61) {
          result0 = "=";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          result1 = parse_opchar();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"="}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PLUS() {
        var cacheKey = "PLUS@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 43) {
          result0 = "+";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (result0 !== null) {
          pos2 = clone(pos);
          reportFailures++;
          result1 = parse_opchar();
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          if (result1 !== null) {
            result2 = parse___();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos1);
            }
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"+"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_NEW() {
        var cacheKey = "NEW@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "new") {
          result0 = "new";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"new\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"new"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_LAZY() {
        var cacheKey = "LAZY@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "lazy") {
          result0 = "lazy";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"lazy\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"lazy"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CASE() {
        var cacheKey = "CASE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 4) === "case") {
          result0 = "case";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"case\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"case"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AT() {
        var cacheKey = "AT@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.charCodeAt(pos.offset) === 64) {
          result0 = "@";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"@\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"@"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_LEFTANGLE() {
        var cacheKey = "LEFTANGLE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === ">:") {
          result0 = ">:";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\">:\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:">:"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_RIGHTANGLE() {
        var cacheKey = "RIGHTANGLE@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 2) === "<:") {
          result0 = "<:";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<:\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"<:"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_VAR() {
        var cacheKey = "VAR@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "var") {
          result0 = "var";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"var\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"var"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_DEF() {
        var cacheKey = "DEF@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 3) === "def") {
          result0 = "def";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"def\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"def"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_OBJECT() {
        var cacheKey = "OBJECT@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 6) === "object") {
          result0 = "object";
          advance(pos, 6);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"object\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"object"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EXTENDS() {
        var cacheKey = "EXTENDS@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        if (input.substr(pos.offset, 7) === "extends") {
          result0 = "extends";
          advance(pos, 7);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"extends\"");
          }
        }
        if (result0 !== null) {
          result1 = parse___();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"Keyword", word:"extends"}})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_XmlExpr() {
        var cacheKey = "XmlExpr@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        result0 = parse_XmlContent();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Element();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Element();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos1);
          }
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"XmlExpr"};})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Element() {
        var cacheKey = "Element@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        result0 = parse_EmptyElemTag();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_STag();
          if (result0 !== null) {
            result1 = parse_Content();
            if (result1 !== null) {
              result2 = parse_ETag();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EmptyElemTag() {
        var cacheKey = "EmptyElemTag@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = [];
            pos1 = clone(pos);
            result3 = parse_S();
            if (result3 !== null) {
              result4 = parse_Attribute();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            } else {
              result3 = null;
              pos = clone(pos1);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos1 = clone(pos);
              result3 = parse_S();
              if (result3 !== null) {
                result4 = parse_Attribute();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            }
            if (result2 !== null) {
              result3 = parse_S();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === "/>") {
                  result4 = "/>";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"/>\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_STag() {
        var cacheKey = "STag@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = [];
            pos1 = clone(pos);
            result3 = parse_S();
            if (result3 !== null) {
              result4 = parse_Attribute();
              if (result4 !== null) {
                result3 = [result3, result4];
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            } else {
              result3 = null;
              pos = clone(pos1);
            }
            while (result3 !== null) {
              result2.push(result3);
              pos1 = clone(pos);
              result3 = parse_S();
              if (result3 !== null) {
                result4 = parse_Attribute();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos1);
                }
              } else {
                result3 = null;
                pos = clone(pos1);
              }
            }
            if (result2 !== null) {
              result3 = parse_S();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                if (input.charCodeAt(pos.offset) === 62) {
                  result4 = ">";
                  advance(pos, 1);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                if (result4 !== null) {
                  result0 = [result0, result1, result2, result3, result4];
                } else {
                  result0 = null;
                  pos = clone(pos0);
                }
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ETag() {
        var cacheKey = "ETag@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "</") {
          result0 = "</";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"</\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = parse_S();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 62) {
                result3 = ">";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Content() {
        var cacheKey = "Content@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_CharData();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse_Content1();
          if (result2 !== null) {
            result3 = parse_CharData();
            result3 = result3 !== null ? result3 : "";
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse_Content1();
            if (result2 !== null) {
              result3 = parse_CharData();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Content1() {
        var cacheKey = "Content1@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_XmlContent();
        if (result0 === null) {
          result0 = parse_Reference();
          if (result0 === null) {
            result0 = parse_Block();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_XmlContent() {
        var cacheKey = "XmlContent@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_Element();
        if (result0 === null) {
          result0 = parse_CDSect();
          if (result0 === null) {
            result0 = parse_PI();
            if (result0 === null) {
              result0 = parse_Comment();
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Attribute() {
        var cacheKey = "Attribute@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_Name();
        if (result0 !== null) {
          result1 = parse_Eq();
          if (result1 !== null) {
            result2 = parse_AttValue();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_AttValue() {
        var cacheKey = "AttValue@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_CharQ();
          if (result2 === null) {
            result2 = parse_CharRef();
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_CharQ();
            if (result2 === null) {
              result2 = parse_CharRef();
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 34) {
              result2 = "\"";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.charCodeAt(pos.offset) === 39) {
            result0 = "'";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (result0 !== null) {
            result1 = [];
            result2 = parse_CharA();
            if (result2 === null) {
              result2 = parse_CharRef();
            }
            while (result2 !== null) {
              result1.push(result2);
              result2 = parse_CharA();
              if (result2 === null) {
                result2 = parse_CharRef();
              }
            }
            if (result1 !== null) {
              if (input.charCodeAt(pos.offset) === 39) {
                result2 = "'";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
          if (result0 === null) {
            result0 = parse_Block();
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CharData() {
        var cacheKey = "CharData@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        pos2 = clone(pos);
        result0 = [];
        result1 = parse_Char1();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Char1();
        }
        if (result0 !== null) {
          result1 = parse_OPBRACE();
          if (result1 !== null) {
            result2 = parse_CharB();
            if (result2 !== null) {
              result3 = [];
              result4 = parse_Char1();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_Char1();
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos2);
              }
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          pos1 = clone(pos);
          reportFailures++;
          pos2 = clone(pos);
          result1 = [];
          result2 = parse_Char1();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Char1();
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "]]>") {
              result2 = "]]>";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"]]>\"");
              }
            }
            if (result2 !== null) {
              result3 = [];
              result4 = parse_Char1();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_Char1();
              }
              if (result3 !== null) {
                result1 = [result1, result2, result3];
              } else {
                result1 = null;
                pos = clone(pos2);
              }
            } else {
              result1 = null;
              pos = clone(pos2);
            }
          } else {
            result1 = null;
            pos = clone(pos2);
          }
          reportFailures--;
          if (result1 === null) {
            result1 = "";
          } else {
            result1 = null;
            pos = clone(pos1);
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_Char1();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_Char1();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Char1() {
        var cacheKey = "Char1@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 38) {
            result0 = "&";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"&\"");
            }
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_Char();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CharQ() {
        var cacheKey = "CharQ@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 34) {
          result0 = "\"";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_Char1();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CharA() {
        var cacheKey = "CharA@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 39) {
          result0 = "'";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_Char1();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CharB() {
        var cacheKey = "CharB@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 123) {
          result0 = "{";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_Char1();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Name() {
        var cacheKey = "Name@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_XNameStart();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_NameChar();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_NameChar();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_XNameStart() {
        var cacheKey = "XNameStart@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        var pos0, pos1;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        if (input.charCodeAt(pos.offset) === 58) {
          result0 = ":";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_UNDER();
          if (result1 === null) {
            result1 = parse_BaseChar();
            if (result1 === null) {
              result1 = parse_Ideographic();
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Char() {
        var cacheKey = "Char@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos.offset) === 9) {
          result0 = "\t";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\t\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 10) {
            result0 = "\n";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\n\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 13) {
              result0 = "\r";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result0 === null) {
              if (/^[ -\uD7FF]/.test(input.charAt(pos.offset))) {
                result0 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[ -\\uD7FF]");
                }
              }
              if (result0 === null) {
                if (/^[\uE000-\uFFFD]/.test(input.charAt(pos.offset))) {
                  result0 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\uE000-\\uFFFD]");
                  }
                }
                if (result0 === null) {
                  if (/^[\u10000-\u10FFFF]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\u10000-\\u10FFFF]");
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = "Comment@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4;
        var pos0, pos1, pos2, pos3;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 4) === "<!--") {
          result0 = "<!--";
          advance(pos, 4);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<!--\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          pos2 = clone(pos);
          reportFailures++;
          if (input.charCodeAt(pos.offset) === 45) {
            result2 = "-";
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          reportFailures--;
          if (result2 === null) {
            result2 = "";
          } else {
            result2 = null;
            pos = clone(pos2);
          }
          if (result2 !== null) {
            result3 = parse_Char();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          if (result2 === null) {
            pos1 = clone(pos);
            if (input.charCodeAt(pos.offset) === 45) {
              result2 = "-";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              reportFailures++;
              if (input.charCodeAt(pos.offset) === 45) {
                result3 = "-";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result4 = parse_Char();
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            pos2 = clone(pos);
            reportFailures++;
            if (input.charCodeAt(pos.offset) === 45) {
              result2 = "-";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-\"");
              }
            }
            reportFailures--;
            if (result2 === null) {
              result2 = "";
            } else {
              result2 = null;
              pos = clone(pos2);
            }
            if (result2 !== null) {
              result3 = parse_Char();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
            if (result2 === null) {
              pos1 = clone(pos);
              if (input.charCodeAt(pos.offset) === 45) {
                result2 = "-";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result2 !== null) {
                pos2 = clone(pos);
                pos3 = clone(pos);
                reportFailures++;
                if (input.charCodeAt(pos.offset) === 45) {
                  result3 = "-";
                  advance(pos, 1);
                } else {
                  result3 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                reportFailures--;
                if (result3 === null) {
                  result3 = "";
                } else {
                  result3 = null;
                  pos = clone(pos3);
                }
                if (result3 !== null) {
                  result4 = parse_Char();
                  if (result4 !== null) {
                    result3 = [result3, result4];
                  } else {
                    result3 = null;
                    pos = clone(pos2);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
                if (result3 !== null) {
                  result2 = [result2, result3];
                } else {
                  result2 = null;
                  pos = clone(pos1);
                }
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            }
          }
          if (result1 !== null) {
            if (input.substr(pos.offset, 3) === "-->") {
              result2 = "-->";
              advance(pos, 3);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"-->\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Eq() {
        var cacheKey = "Eq@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_S();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = parse_EQUAL();
          if (result1 !== null) {
            result2 = parse_S();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Ideographic() {
        var cacheKey = "Ideographic@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[\u4E00-\u9FA5]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\u4E00-\\u9FA5]");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 12295) {
            result0 = "\u3007";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u3007\"");
            }
          }
          if (result0 === null) {
            if (/^[\u3021-\u3029]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\u3021-\\u3029]");
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_NameChar() {
        var cacheKey = "NameChar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_NameStartChar();
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 45) {
            result0 = "-";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 46) {
              result0 = ".";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\".\"");
              }
            }
            if (result0 === null) {
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result0 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos.offset) === 183) {
                  result0 = "\xB7";
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\xB7\"");
                  }
                }
                if (result0 === null) {
                  if (/^[\u0300-\u036F]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\u0300-\\u036F]");
                    }
                  }
                  if (result0 === null) {
                    if (/^[\u203F-\u2040]/.test(input.charAt(pos.offset))) {
                      result0 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("[\\u203F-\\u2040]");
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_NameStartChar() {
        var cacheKey = "NameStartChar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.charCodeAt(pos.offset) === 58) {
          result0 = ":";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 === null) {
          if (/^[A-Z]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[A-Z]");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos.offset) === 95) {
              result0 = "_";
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"_\"");
              }
            }
            if (result0 === null) {
              if (/^[a-z]/.test(input.charAt(pos.offset))) {
                result0 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[a-z]");
                }
              }
              if (result0 === null) {
                if (/^[\xC0-\xD6]/.test(input.charAt(pos.offset))) {
                  result0 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\xC0-\\xD6]");
                  }
                }
                if (result0 === null) {
                  if (/^[\xD8-\xF6]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\xD8-\\xF6]");
                    }
                  }
                  if (result0 === null) {
                    if (/^[\xF8-\u02FF]/.test(input.charAt(pos.offset))) {
                      result0 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("[\\xF8-\\u02FF]");
                      }
                    }
                    if (result0 === null) {
                      if (/^[\u0370-\u037D]/.test(input.charAt(pos.offset))) {
                        result0 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("[\\u0370-\\u037D]");
                        }
                      }
                      if (result0 === null) {
                        if (/^[\u037F-\u1FFF]/.test(input.charAt(pos.offset))) {
                          result0 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("[\\u037F-\\u1FFF]");
                          }
                        }
                        if (result0 === null) {
                          if (/^[\u200C-\u200D]/.test(input.charAt(pos.offset))) {
                            result0 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("[\\u200C-\\u200D]");
                            }
                          }
                          if (result0 === null) {
                            if (/^[\u2070-\u218F]/.test(input.charAt(pos.offset))) {
                              result0 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("[\\u2070-\\u218F]");
                              }
                            }
                            if (result0 === null) {
                              if (/^[\u2C00-\u2FEF]/.test(input.charAt(pos.offset))) {
                                result0 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[\\u2C00-\\u2FEF]");
                                }
                              }
                              if (result0 === null) {
                                if (/^[\u3001-\uD7FF]/.test(input.charAt(pos.offset))) {
                                  result0 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[\\u3001-\\uD7FF]");
                                  }
                                }
                                if (result0 === null) {
                                  if (/^[\uF900-\uFDCF]/.test(input.charAt(pos.offset))) {
                                    result0 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[\\uF900-\\uFDCF]");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (/^[\uFDF0-\uFFFD]/.test(input.charAt(pos.offset))) {
                                      result0 = input.charAt(pos.offset);
                                      advance(pos, 1);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("[\\uFDF0-\\uFFFD]");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (/^[\u10000-\uEFFFF]/.test(input.charAt(pos.offset))) {
                                        result0 = input.charAt(pos.offset);
                                        advance(pos, 1);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("[\\u10000-\\uEFFFF]");
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_Reference() {
        var cacheKey = "Reference@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        result0 = parse_EntityRef();
        if (result0 === null) {
          result0 = parse_CharRef();
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EntityRef() {
        var cacheKey = "EntityRef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 38) {
          result0 = "&";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = parse_SEMICOLON();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CharRef() {
        var cacheKey = "CharRef@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "&#") {
          result0 = "&#";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&#\"");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos.offset))) {
            result2 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos.offset))) {
                result2 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result2 = parse_SEMICOLON();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        if (result0 === null) {
          pos0 = clone(pos);
          if (input.substr(pos.offset, 3) === "&#x") {
            result0 = "&#x";
            advance(pos, 3);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"&#x\"");
            }
          }
          if (result0 !== null) {
            if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
              result2 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[0-9a-fA-F]");
              }
            }
            if (result2 !== null) {
              result1 = [];
              while (result2 !== null) {
                result1.push(result2);
                if (/^[0-9a-fA-F]/.test(input.charAt(pos.offset))) {
                  result2 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("[0-9a-fA-F]");
                  }
                }
              }
            } else {
              result1 = null;
            }
            if (result1 !== null) {
              result2 = parse_SEMICOLON();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_BaseChar() {
        var cacheKey = "BaseChar@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (/^[A-Z]/.test(input.charAt(pos.offset))) {
          result0 = input.charAt(pos.offset);
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z]");
          }
        }
        if (result0 === null) {
          if (/^[a-z]/.test(input.charAt(pos.offset))) {
            result0 = input.charAt(pos.offset);
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("[a-z]");
            }
          }
          if (result0 === null) {
            if (/^[\xC0-\xD6]/.test(input.charAt(pos.offset))) {
              result0 = input.charAt(pos.offset);
              advance(pos, 1);
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("[\\xC0-\\xD6]");
              }
            }
            if (result0 === null) {
              if (/^[\xD8-\xF6]/.test(input.charAt(pos.offset))) {
                result0 = input.charAt(pos.offset);
                advance(pos, 1);
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\xD8-\\xF6]");
                }
              }
              if (result0 === null) {
                if (/^[\xF8-\xFF]/.test(input.charAt(pos.offset))) {
                  result0 = input.charAt(pos.offset);
                  advance(pos, 1);
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("[\\xF8-\\xFF]");
                  }
                }
                if (result0 === null) {
                  if (/^[\u0100-\u0131]/.test(input.charAt(pos.offset))) {
                    result0 = input.charAt(pos.offset);
                    advance(pos, 1);
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("[\\u0100-\\u0131]");
                    }
                  }
                  if (result0 === null) {
                    if (/^[\u0134-\u013E]/.test(input.charAt(pos.offset))) {
                      result0 = input.charAt(pos.offset);
                      advance(pos, 1);
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("[\\u0134-\\u013E]");
                      }
                    }
                    if (result0 === null) {
                      if (/^[\u0141-\u0148]/.test(input.charAt(pos.offset))) {
                        result0 = input.charAt(pos.offset);
                        advance(pos, 1);
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("[\\u0141-\\u0148]");
                        }
                      }
                      if (result0 === null) {
                        if (/^[\u014A-\u017E]/.test(input.charAt(pos.offset))) {
                          result0 = input.charAt(pos.offset);
                          advance(pos, 1);
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("[\\u014A-\\u017E]");
                          }
                        }
                        if (result0 === null) {
                          if (/^[\u0180-\u01C3]/.test(input.charAt(pos.offset))) {
                            result0 = input.charAt(pos.offset);
                            advance(pos, 1);
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("[\\u0180-\\u01C3]");
                            }
                          }
                          if (result0 === null) {
                            if (/^[\u01CD-\u01F0]/.test(input.charAt(pos.offset))) {
                              result0 = input.charAt(pos.offset);
                              advance(pos, 1);
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("[\\u01CD-\\u01F0]");
                              }
                            }
                            if (result0 === null) {
                              if (/^[\u01F4-\u01F5]/.test(input.charAt(pos.offset))) {
                                result0 = input.charAt(pos.offset);
                                advance(pos, 1);
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("[\\u01F4-\\u01F5]");
                                }
                              }
                              if (result0 === null) {
                                if (/^[\u01FA-\u0217]/.test(input.charAt(pos.offset))) {
                                  result0 = input.charAt(pos.offset);
                                  advance(pos, 1);
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("[\\u01FA-\\u0217]");
                                  }
                                }
                                if (result0 === null) {
                                  if (/^[\u0250-\u02A8]/.test(input.charAt(pos.offset))) {
                                    result0 = input.charAt(pos.offset);
                                    advance(pos, 1);
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("[\\u0250-\\u02A8]");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (/^[\u02BB-\u02C1]/.test(input.charAt(pos.offset))) {
                                      result0 = input.charAt(pos.offset);
                                      advance(pos, 1);
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("[\\u02BB-\\u02C1]");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos.offset) === 902) {
                                        result0 = "\u0386";
                                        advance(pos, 1);
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"\\u0386\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (/^[\u0388-\u038A]/.test(input.charAt(pos.offset))) {
                                          result0 = input.charAt(pos.offset);
                                          advance(pos, 1);
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("[\\u0388-\\u038A]");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.charCodeAt(pos.offset) === 908) {
                                            result0 = "\u038C";
                                            advance(pos, 1);
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"\\u038C\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (/^[\u038E-\u03A1]/.test(input.charAt(pos.offset))) {
                                              result0 = input.charAt(pos.offset);
                                              advance(pos, 1);
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("[\\u038E-\\u03A1]");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (/^[\u03A3-\u03CE]/.test(input.charAt(pos.offset))) {
                                                result0 = input.charAt(pos.offset);
                                                advance(pos, 1);
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("[\\u03A3-\\u03CE]");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (/^[\u03D0-\u03D6]/.test(input.charAt(pos.offset))) {
                                                  result0 = input.charAt(pos.offset);
                                                  advance(pos, 1);
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("[\\u03D0-\\u03D6]");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.charCodeAt(pos.offset) === 986) {
                                                    result0 = "\u03DA";
                                                    advance(pos, 1);
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"\\u03DA\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.charCodeAt(pos.offset) === 988) {
                                                      result0 = "\u03DC";
                                                      advance(pos, 1);
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"\\u03DC\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.charCodeAt(pos.offset) === 990) {
                                                        result0 = "\u03DE";
                                                        advance(pos, 1);
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"\\u03DE\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.charCodeAt(pos.offset) === 992) {
                                                          result0 = "\u03E0";
                                                          advance(pos, 1);
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"\\u03E0\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (/^[\u03E2-\u03F3]/.test(input.charAt(pos.offset))) {
                                                            result0 = input.charAt(pos.offset);
                                                            advance(pos, 1);
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("[\\u03E2-\\u03F3]");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (/^[\u0401-\u040C]/.test(input.charAt(pos.offset))) {
                                                              result0 = input.charAt(pos.offset);
                                                              advance(pos, 1);
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("[\\u0401-\\u040C]");
                                                              }
                                                            }
                                                            if (result0 === null) {
                                                              if (/^[\u040E-\u044F]/.test(input.charAt(pos.offset))) {
                                                                result0 = input.charAt(pos.offset);
                                                                advance(pos, 1);
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("[\\u040E-\\u044F]");
                                                                }
                                                              }
                                                              if (result0 === null) {
                                                                if (/^[\u0451-\u045C]/.test(input.charAt(pos.offset))) {
                                                                  result0 = input.charAt(pos.offset);
                                                                  advance(pos, 1);
                                                                } else {
                                                                  result0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("[\\u0451-\\u045C]");
                                                                  }
                                                                }
                                                                if (result0 === null) {
                                                                  if (/^[\u045E-\u0481]/.test(input.charAt(pos.offset))) {
                                                                    result0 = input.charAt(pos.offset);
                                                                    advance(pos, 1);
                                                                  } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("[\\u045E-\\u0481]");
                                                                    }
                                                                  }
                                                                  if (result0 === null) {
                                                                    if (/^[\u0490-\u04C4]/.test(input.charAt(pos.offset))) {
                                                                      result0 = input.charAt(pos.offset);
                                                                      advance(pos, 1);
                                                                    } else {
                                                                      result0 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("[\\u0490-\\u04C4]");
                                                                      }
                                                                    }
                                                                    if (result0 === null) {
                                                                      if (/^[\u04C7-\u04C8]/.test(input.charAt(pos.offset))) {
                                                                        result0 = input.charAt(pos.offset);
                                                                        advance(pos, 1);
                                                                      } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                          matchFailed("[\\u04C7-\\u04C8]");
                                                                        }
                                                                      }
                                                                      if (result0 === null) {
                                                                        if (/^[\u04CB-\u04CC]/.test(input.charAt(pos.offset))) {
                                                                          result0 = input.charAt(pos.offset);
                                                                          advance(pos, 1);
                                                                        } else {
                                                                          result0 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("[\\u04CB-\\u04CC]");
                                                                          }
                                                                        }
                                                                        if (result0 === null) {
                                                                          if (/^[\u04D0-\u04EB]/.test(input.charAt(pos.offset))) {
                                                                            result0 = input.charAt(pos.offset);
                                                                            advance(pos, 1);
                                                                          } else {
                                                                            result0 = null;
                                                                            if (reportFailures === 0) {
                                                                              matchFailed("[\\u04D0-\\u04EB]");
                                                                            }
                                                                          }
                                                                          if (result0 === null) {
                                                                            if (/^[\u04EE-\u04F5]/.test(input.charAt(pos.offset))) {
                                                                              result0 = input.charAt(pos.offset);
                                                                              advance(pos, 1);
                                                                            } else {
                                                                              result0 = null;
                                                                              if (reportFailures === 0) {
                                                                                matchFailed("[\\u04EE-\\u04F5]");
                                                                              }
                                                                            }
                                                                            if (result0 === null) {
                                                                              if (/^[\u04F8-\u04F9]/.test(input.charAt(pos.offset))) {
                                                                                result0 = input.charAt(pos.offset);
                                                                                advance(pos, 1);
                                                                              } else {
                                                                                result0 = null;
                                                                                if (reportFailures === 0) {
                                                                                  matchFailed("[\\u04F8-\\u04F9]");
                                                                                }
                                                                              }
                                                                              if (result0 === null) {
                                                                                if (/^[\u0531-\u0556]/.test(input.charAt(pos.offset))) {
                                                                                  result0 = input.charAt(pos.offset);
                                                                                  advance(pos, 1);
                                                                                } else {
                                                                                  result0 = null;
                                                                                  if (reportFailures === 0) {
                                                                                    matchFailed("[\\u0531-\\u0556]");
                                                                                  }
                                                                                }
                                                                                if (result0 === null) {
                                                                                  if (input.charCodeAt(pos.offset) === 1369) {
                                                                                    result0 = "\u0559";
                                                                                    advance(pos, 1);
                                                                                  } else {
                                                                                    result0 = null;
                                                                                    if (reportFailures === 0) {
                                                                                      matchFailed("\"\\u0559\"");
                                                                                    }
                                                                                  }
                                                                                  if (result0 === null) {
                                                                                    if (/^[\u0561-\u0586]/.test(input.charAt(pos.offset))) {
                                                                                      result0 = input.charAt(pos.offset);
                                                                                      advance(pos, 1);
                                                                                    } else {
                                                                                      result0 = null;
                                                                                      if (reportFailures === 0) {
                                                                                        matchFailed("[\\u0561-\\u0586]");
                                                                                      }
                                                                                    }
                                                                                    if (result0 === null) {
                                                                                      if (/^[\u05D0-\u05EA]/.test(input.charAt(pos.offset))) {
                                                                                        result0 = input.charAt(pos.offset);
                                                                                        advance(pos, 1);
                                                                                      } else {
                                                                                        result0 = null;
                                                                                        if (reportFailures === 0) {
                                                                                          matchFailed("[\\u05D0-\\u05EA]");
                                                                                        }
                                                                                      }
                                                                                      if (result0 === null) {
                                                                                        if (/^[\u05F0-\u05F2]/.test(input.charAt(pos.offset))) {
                                                                                          result0 = input.charAt(pos.offset);
                                                                                          advance(pos, 1);
                                                                                        } else {
                                                                                          result0 = null;
                                                                                          if (reportFailures === 0) {
                                                                                            matchFailed("[\\u05F0-\\u05F2]");
                                                                                          }
                                                                                        }
                                                                                        if (result0 === null) {
                                                                                          if (/^[\u0621-\u063A]/.test(input.charAt(pos.offset))) {
                                                                                            result0 = input.charAt(pos.offset);
                                                                                            advance(pos, 1);
                                                                                          } else {
                                                                                            result0 = null;
                                                                                            if (reportFailures === 0) {
                                                                                              matchFailed("[\\u0621-\\u063A]");
                                                                                            }
                                                                                          }
                                                                                          if (result0 === null) {
                                                                                            if (/^[\u0641-\u064A]/.test(input.charAt(pos.offset))) {
                                                                                              result0 = input.charAt(pos.offset);
                                                                                              advance(pos, 1);
                                                                                            } else {
                                                                                              result0 = null;
                                                                                              if (reportFailures === 0) {
                                                                                                matchFailed("[\\u0641-\\u064A]");
                                                                                              }
                                                                                            }
                                                                                            if (result0 === null) {
                                                                                              if (/^[\u0671-\u06B7]/.test(input.charAt(pos.offset))) {
                                                                                                result0 = input.charAt(pos.offset);
                                                                                                advance(pos, 1);
                                                                                              } else {
                                                                                                result0 = null;
                                                                                                if (reportFailures === 0) {
                                                                                                  matchFailed("[\\u0671-\\u06B7]");
                                                                                                }
                                                                                              }
                                                                                              if (result0 === null) {
                                                                                                if (/^[\u06BA-\u06BE]/.test(input.charAt(pos.offset))) {
                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                  advance(pos, 1);
                                                                                                } else {
                                                                                                  result0 = null;
                                                                                                  if (reportFailures === 0) {
                                                                                                    matchFailed("[\\u06BA-\\u06BE]");
                                                                                                  }
                                                                                                }
                                                                                                if (result0 === null) {
                                                                                                  if (/^[\u06C0-\u06CE]/.test(input.charAt(pos.offset))) {
                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                    advance(pos, 1);
                                                                                                  } else {
                                                                                                    result0 = null;
                                                                                                    if (reportFailures === 0) {
                                                                                                      matchFailed("[\\u06C0-\\u06CE]");
                                                                                                    }
                                                                                                  }
                                                                                                  if (result0 === null) {
                                                                                                    if (/^[\u06D0-\u06D3]/.test(input.charAt(pos.offset))) {
                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                      advance(pos, 1);
                                                                                                    } else {
                                                                                                      result0 = null;
                                                                                                      if (reportFailures === 0) {
                                                                                                        matchFailed("[\\u06D0-\\u06D3]");
                                                                                                      }
                                                                                                    }
                                                                                                    if (result0 === null) {
                                                                                                      if (input.charCodeAt(pos.offset) === 1749) {
                                                                                                        result0 = "\u06D5";
                                                                                                        advance(pos, 1);
                                                                                                      } else {
                                                                                                        result0 = null;
                                                                                                        if (reportFailures === 0) {
                                                                                                          matchFailed("\"\\u06D5\"");
                                                                                                        }
                                                                                                      }
                                                                                                      if (result0 === null) {
                                                                                                        if (/^[\u06E5-\u06E6]/.test(input.charAt(pos.offset))) {
                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                          advance(pos, 1);
                                                                                                        } else {
                                                                                                          result0 = null;
                                                                                                          if (reportFailures === 0) {
                                                                                                            matchFailed("[\\u06E5-\\u06E6]");
                                                                                                          }
                                                                                                        }
                                                                                                        if (result0 === null) {
                                                                                                          if (/^[\u0905-\u0939]/.test(input.charAt(pos.offset))) {
                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                            advance(pos, 1);
                                                                                                          } else {
                                                                                                            result0 = null;
                                                                                                            if (reportFailures === 0) {
                                                                                                              matchFailed("[\\u0905-\\u0939]");
                                                                                                            }
                                                                                                          }
                                                                                                          if (result0 === null) {
                                                                                                            if (input.charCodeAt(pos.offset) === 2365) {
                                                                                                              result0 = "\u093D";
                                                                                                              advance(pos, 1);
                                                                                                            } else {
                                                                                                              result0 = null;
                                                                                                              if (reportFailures === 0) {
                                                                                                                matchFailed("\"\\u093D\"");
                                                                                                              }
                                                                                                            }
                                                                                                            if (result0 === null) {
                                                                                                              if (/^[\u0958-\u0961]/.test(input.charAt(pos.offset))) {
                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                advance(pos, 1);
                                                                                                              } else {
                                                                                                                result0 = null;
                                                                                                                if (reportFailures === 0) {
                                                                                                                  matchFailed("[\\u0958-\\u0961]");
                                                                                                                }
                                                                                                              }
                                                                                                              if (result0 === null) {
                                                                                                                if (/^[\u0985-\u098C]/.test(input.charAt(pos.offset))) {
                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                  advance(pos, 1);
                                                                                                                } else {
                                                                                                                  result0 = null;
                                                                                                                  if (reportFailures === 0) {
                                                                                                                    matchFailed("[\\u0985-\\u098C]");
                                                                                                                  }
                                                                                                                }
                                                                                                                if (result0 === null) {
                                                                                                                  if (/^[\u098F-\u0990]/.test(input.charAt(pos.offset))) {
                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                    advance(pos, 1);
                                                                                                                  } else {
                                                                                                                    result0 = null;
                                                                                                                    if (reportFailures === 0) {
                                                                                                                      matchFailed("[\\u098F-\\u0990]");
                                                                                                                    }
                                                                                                                  }
                                                                                                                  if (result0 === null) {
                                                                                                                    if (/^[\u0993-\u09A8]/.test(input.charAt(pos.offset))) {
                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                      advance(pos, 1);
                                                                                                                    } else {
                                                                                                                      result0 = null;
                                                                                                                      if (reportFailures === 0) {
                                                                                                                        matchFailed("[\\u0993-\\u09A8]");
                                                                                                                      }
                                                                                                                    }
                                                                                                                    if (result0 === null) {
                                                                                                                      if (/^[\u09AA-\u09B0]/.test(input.charAt(pos.offset))) {
                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                        advance(pos, 1);
                                                                                                                      } else {
                                                                                                                        result0 = null;
                                                                                                                        if (reportFailures === 0) {
                                                                                                                          matchFailed("[\\u09AA-\\u09B0]");
                                                                                                                        }
                                                                                                                      }
                                                                                                                      if (result0 === null) {
                                                                                                                        if (input.charCodeAt(pos.offset) === 2482) {
                                                                                                                          result0 = "\u09B2";
                                                                                                                          advance(pos, 1);
                                                                                                                        } else {
                                                                                                                          result0 = null;
                                                                                                                          if (reportFailures === 0) {
                                                                                                                            matchFailed("\"\\u09B2\"");
                                                                                                                          }
                                                                                                                        }
                                                                                                                        if (result0 === null) {
                                                                                                                          if (/^[\u09B6-\u09B9]/.test(input.charAt(pos.offset))) {
                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                            advance(pos, 1);
                                                                                                                          } else {
                                                                                                                            result0 = null;
                                                                                                                            if (reportFailures === 0) {
                                                                                                                              matchFailed("[\\u09B6-\\u09B9]");
                                                                                                                            }
                                                                                                                          }
                                                                                                                          if (result0 === null) {
                                                                                                                            if (/^[\u09DC-\u09DD]/.test(input.charAt(pos.offset))) {
                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                              advance(pos, 1);
                                                                                                                            } else {
                                                                                                                              result0 = null;
                                                                                                                              if (reportFailures === 0) {
                                                                                                                                matchFailed("[\\u09DC-\\u09DD]");
                                                                                                                              }
                                                                                                                            }
                                                                                                                            if (result0 === null) {
                                                                                                                              if (/^[\u09DF-\u09E1]/.test(input.charAt(pos.offset))) {
                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                advance(pos, 1);
                                                                                                                              } else {
                                                                                                                                result0 = null;
                                                                                                                                if (reportFailures === 0) {
                                                                                                                                  matchFailed("[\\u09DF-\\u09E1]");
                                                                                                                                }
                                                                                                                              }
                                                                                                                              if (result0 === null) {
                                                                                                                                if (/^[\u09F0-\u09F1]/.test(input.charAt(pos.offset))) {
                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                  advance(pos, 1);
                                                                                                                                } else {
                                                                                                                                  result0 = null;
                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                    matchFailed("[\\u09F0-\\u09F1]");
                                                                                                                                  }
                                                                                                                                }
                                                                                                                                if (result0 === null) {
                                                                                                                                  if (/^[\u0A05-\u0A0A]/.test(input.charAt(pos.offset))) {
                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                    advance(pos, 1);
                                                                                                                                  } else {
                                                                                                                                    result0 = null;
                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                      matchFailed("[\\u0A05-\\u0A0A]");
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                  if (result0 === null) {
                                                                                                                                    if (/^[\u0A0F-\u0A10]/.test(input.charAt(pos.offset))) {
                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                      advance(pos, 1);
                                                                                                                                    } else {
                                                                                                                                      result0 = null;
                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                        matchFailed("[\\u0A0F-\\u0A10]");
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    if (result0 === null) {
                                                                                                                                      if (/^[\u0A13-\u0A28]/.test(input.charAt(pos.offset))) {
                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                        advance(pos, 1);
                                                                                                                                      } else {
                                                                                                                                        result0 = null;
                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                          matchFailed("[\\u0A13-\\u0A28]");
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                      if (result0 === null) {
                                                                                                                                        if (/^[\u0A2A-\u0A30]/.test(input.charAt(pos.offset))) {
                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                          advance(pos, 1);
                                                                                                                                        } else {
                                                                                                                                          result0 = null;
                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                            matchFailed("[\\u0A2A-\\u0A30]");
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                        if (result0 === null) {
                                                                                                                                          if (/^[\u0A32-\u0A33]/.test(input.charAt(pos.offset))) {
                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                            advance(pos, 1);
                                                                                                                                          } else {
                                                                                                                                            result0 = null;
                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                              matchFailed("[\\u0A32-\\u0A33]");
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                          if (result0 === null) {
                                                                                                                                            if (/^[\u0A35-\u0A36]/.test(input.charAt(pos.offset))) {
                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                              advance(pos, 1);
                                                                                                                                            } else {
                                                                                                                                              result0 = null;
                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                matchFailed("[\\u0A35-\\u0A36]");
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                            if (result0 === null) {
                                                                                                                                              if (/^[\u0A38-\u0A39]/.test(input.charAt(pos.offset))) {
                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                advance(pos, 1);
                                                                                                                                              } else {
                                                                                                                                                result0 = null;
                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                  matchFailed("[\\u0A38-\\u0A39]");
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                              if (result0 === null) {
                                                                                                                                                if (/^[\u0A59-\u0A5C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                  advance(pos, 1);
                                                                                                                                                } else {
                                                                                                                                                  result0 = null;
                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                    matchFailed("[\\u0A59-\\u0A5C]");
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                                if (result0 === null) {
                                                                                                                                                  if (input.charCodeAt(pos.offset) === 2654) {
                                                                                                                                                    result0 = "\u0A5E";
                                                                                                                                                    advance(pos, 1);
                                                                                                                                                  } else {
                                                                                                                                                    result0 = null;
                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                      matchFailed("\"\\u0A5E\"");
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                  if (result0 === null) {
                                                                                                                                                    if (/^[\u0A72-\u0A74]/.test(input.charAt(pos.offset))) {
                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                      advance(pos, 1);
                                                                                                                                                    } else {
                                                                                                                                                      result0 = null;
                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                        matchFailed("[\\u0A72-\\u0A74]");
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                    if (result0 === null) {
                                                                                                                                                      if (/^[\u0A85-\u0A8B]/.test(input.charAt(pos.offset))) {
                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                        advance(pos, 1);
                                                                                                                                                      } else {
                                                                                                                                                        result0 = null;
                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                          matchFailed("[\\u0A85-\\u0A8B]");
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                      if (result0 === null) {
                                                                                                                                                        if (input.charCodeAt(pos.offset) === 2701) {
                                                                                                                                                          result0 = "\u0A8D";
                                                                                                                                                          advance(pos, 1);
                                                                                                                                                        } else {
                                                                                                                                                          result0 = null;
                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                            matchFailed("\"\\u0A8D\"");
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                        if (result0 === null) {
                                                                                                                                                          if (/^[\u0A8F-\u0A91]/.test(input.charAt(pos.offset))) {
                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                            advance(pos, 1);
                                                                                                                                                          } else {
                                                                                                                                                            result0 = null;
                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                              matchFailed("[\\u0A8F-\\u0A91]");
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                          if (result0 === null) {
                                                                                                                                                            if (/^[\u0A93-\u0AA8]/.test(input.charAt(pos.offset))) {
                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                              advance(pos, 1);
                                                                                                                                                            } else {
                                                                                                                                                              result0 = null;
                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                matchFailed("[\\u0A93-\\u0AA8]");
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                            if (result0 === null) {
                                                                                                                                                              if (/^[\u0AAA-\u0AB0]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                advance(pos, 1);
                                                                                                                                                              } else {
                                                                                                                                                                result0 = null;
                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                  matchFailed("[\\u0AAA-\\u0AB0]");
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                if (/^[\u0AB2-\u0AB3]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                } else {
                                                                                                                                                                  result0 = null;
                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                    matchFailed("[\\u0AB2-\\u0AB3]");
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                  if (/^[\u0AB5-\u0AB9]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                  } else {
                                                                                                                                                                    result0 = null;
                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                      matchFailed("[\\u0AB5-\\u0AB9]");
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 2749) {
                                                                                                                                                                      result0 = "\u0ABD";
                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                    } else {
                                                                                                                                                                      result0 = null;
                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                        matchFailed("\"\\u0ABD\"");
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                      if (input.charCodeAt(pos.offset) === 2784) {
                                                                                                                                                                        result0 = "\u0AE0";
                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                      } else {
                                                                                                                                                                        result0 = null;
                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                          matchFailed("\"\\u0AE0\"");
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                        if (/^[\u0B05-\u0B0C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                        } else {
                                                                                                                                                                          result0 = null;
                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                            matchFailed("[\\u0B05-\\u0B0C]");
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                          if (/^[\u0B0F-\u0B10]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                          } else {
                                                                                                                                                                            result0 = null;
                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                              matchFailed("[\\u0B0F-\\u0B10]");
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                            if (/^[\u0B13-\u0B28]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                            } else {
                                                                                                                                                                              result0 = null;
                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                matchFailed("[\\u0B13-\\u0B28]");
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                              if (/^[\u0B2A-\u0B30]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                              } else {
                                                                                                                                                                                result0 = null;
                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                  matchFailed("[\\u0B2A-\\u0B30]");
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                if (/^[\u0B32-\u0B33]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                } else {
                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                    matchFailed("[\\u0B32-\\u0B33]");
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                  if (/^[\u0B36-\u0B39]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                  } else {
                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                      matchFailed("[\\u0B36-\\u0B39]");
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 2877) {
                                                                                                                                                                                      result0 = "\u0B3D";
                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                    } else {
                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                        matchFailed("\"\\u0B3D\"");
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                      if (/^[\u0B5C-\u0B5D]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                      } else {
                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                          matchFailed("[\\u0B5C-\\u0B5D]");
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                        if (/^[\u0B5F-\u0B61]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                        } else {
                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                            matchFailed("[\\u0B5F-\\u0B61]");
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                          if (/^[\u0B85-\u0B8A]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                          } else {
                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                              matchFailed("[\\u0B85-\\u0B8A]");
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                            if (/^[\u0B8E-\u0B90]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                            } else {
                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                matchFailed("[\\u0B8E-\\u0B90]");
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                              if (/^[\u0B92-\u0B95]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                              } else {
                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                  matchFailed("[\\u0B92-\\u0B95]");
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                if (/^[\u0B99-\u0B9A]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                } else {
                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                    matchFailed("[\\u0B99-\\u0B9A]");
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 2972) {
                                                                                                                                                                                                    result0 = "\u0B9C";
                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                  } else {
                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                      matchFailed("\"\\u0B9C\"");
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                    if (/^[\u0B9E-\u0B9F]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                    } else {
                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                        matchFailed("[\\u0B9E-\\u0B9F]");
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                      if (/^[\u0BA3-\u0BA4]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                      } else {
                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                          matchFailed("[\\u0BA3-\\u0BA4]");
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                        if (/^[\u0BA8-\u0BAA]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                        } else {
                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                            matchFailed("[\\u0BA8-\\u0BAA]");
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                          if (/^[\u0BAE-\u0BB5]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                          } else {
                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                              matchFailed("[\\u0BAE-\\u0BB5]");
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                            if (/^[\u0BB7-\u0BB9]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                            } else {
                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                matchFailed("[\\u0BB7-\\u0BB9]");
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                              if (/^[\u0C05-\u0C0C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                  matchFailed("[\\u0C05-\\u0C0C]");
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                if (/^[\u0C0E-\u0C10]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                    matchFailed("[\\u0C0E-\\u0C10]");
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                  if (/^[\u0C12-\u0C28]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                      matchFailed("[\\u0C12-\\u0C28]");
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                    if (/^[\u0C2A-\u0C33]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                        matchFailed("[\\u0C2A-\\u0C33]");
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                      if (/^[\u0C35-\u0C39]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                          matchFailed("[\\u0C35-\\u0C39]");
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                        if (/^[\u0C60-\u0C61]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                            matchFailed("[\\u0C60-\\u0C61]");
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                          if (/^[\u0C85-\u0C8C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                              matchFailed("[\\u0C85-\\u0C8C]");
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                            if (/^[\u0C8E-\u0C90]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                matchFailed("[\\u0C8E-\\u0C90]");
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                              if (/^[\u0C92-\u0CA8]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                  matchFailed("[\\u0C92-\\u0CA8]");
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                if (/^[\u0CAA-\u0CB3]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                    matchFailed("[\\u0CAA-\\u0CB3]");
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                  if (/^[\u0CB5-\u0CB9]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                      matchFailed("[\\u0CB5-\\u0CB9]");
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 3294) {
                                                                                                                                                                                                                                      result0 = "\u0CDE";
                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                        matchFailed("\"\\u0CDE\"");
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                      if (/^[\u0CE0-\u0CE1]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                          matchFailed("[\\u0CE0-\\u0CE1]");
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                        if (/^[\u0D05-\u0D0C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                            matchFailed("[\\u0D05-\\u0D0C]");
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                          if (/^[\u0D0E-\u0D10]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                              matchFailed("[\\u0D0E-\\u0D10]");
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                            if (/^[\u0D12-\u0D28]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                matchFailed("[\\u0D12-\\u0D28]");
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                              if (/^[\u0D2A-\u0D39]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                  matchFailed("[\\u0D2A-\\u0D39]");
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                if (/^[\u0D60-\u0D61]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                    matchFailed("[\\u0D60-\\u0D61]");
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                  if (/^[\u0E01-\u0E2E]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                      matchFailed("[\\u0E01-\\u0E2E]");
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 3632) {
                                                                                                                                                                                                                                                      result0 = "\u0E30";
                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                        matchFailed("\"\\u0E30\"");
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                      if (/^[\u0E32-\u0E33]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                          matchFailed("[\\u0E32-\\u0E33]");
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                        if (/^[\u0E40-\u0E45]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                            matchFailed("[\\u0E40-\\u0E45]");
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                          if (/^[\u0E81-\u0E82]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                              matchFailed("[\\u0E81-\\u0E82]");
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 3716) {
                                                                                                                                                                                                                                                              result0 = "\u0E84";
                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                matchFailed("\"\\u0E84\"");
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                              if (/^[\u0E87-\u0E88]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                  matchFailed("[\\u0E87-\\u0E88]");
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 3722) {
                                                                                                                                                                                                                                                                  result0 = "\u0E8A";
                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                    matchFailed("\"\\u0E8A\"");
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 3725) {
                                                                                                                                                                                                                                                                    result0 = "\u0E8D";
                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                      matchFailed("\"\\u0E8D\"");
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                    if (/^[\u0E94-\u0E97]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                        matchFailed("[\\u0E94-\\u0E97]");
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                      if (/^[\u0E99-\u0E9F]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                          matchFailed("[\\u0E99-\\u0E9F]");
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                        if (/^[\u0EA1-\u0EA3]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                            matchFailed("[\\u0EA1-\\u0EA3]");
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                          if (input.charCodeAt(pos.offset) === 3749) {
                                                                                                                                                                                                                                                                            result0 = "\u0EA5";
                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                              matchFailed("\"\\u0EA5\"");
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 3751) {
                                                                                                                                                                                                                                                                              result0 = "\u0EA7";
                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                matchFailed("\"\\u0EA7\"");
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                              if (/^[\u0EAA-\u0EAB]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                  matchFailed("[\\u0EAA-\\u0EAB]");
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                if (/^[\u0EAD-\u0EAE]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                    matchFailed("[\\u0EAD-\\u0EAE]");
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 3760) {
                                                                                                                                                                                                                                                                                    result0 = "\u0EB0";
                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                      matchFailed("\"\\u0EB0\"");
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                    if (/^[\u0EB2-\u0EB3]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                        matchFailed("[\\u0EB2-\\u0EB3]");
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                      if (input.charCodeAt(pos.offset) === 3773) {
                                                                                                                                                                                                                                                                                        result0 = "\u0EBD";
                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                          matchFailed("\"\\u0EBD\"");
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                        if (/^[\u0EC0-\u0EC4]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                            matchFailed("[\\u0EC0-\\u0EC4]");
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                          if (/^[\u0F40-\u0F47]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                              matchFailed("[\\u0F40-\\u0F47]");
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                            if (/^[\u0F49-\u0F69]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                matchFailed("[\\u0F49-\\u0F69]");
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                              if (/^[\u10A0-\u10C5]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                  matchFailed("[\\u10A0-\\u10C5]");
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                if (/^[\u10D0-\u10F6]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                    matchFailed("[\\u10D0-\\u10F6]");
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 4352) {
                                                                                                                                                                                                                                                                                                    result0 = "\u1100";
                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                      matchFailed("\"\\u1100\"");
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                    if (/^[\u1102-\u1103]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                        matchFailed("[\\u1102-\\u1103]");
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                      if (/^[\u1105-\u1107]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                          matchFailed("[\\u1105-\\u1107]");
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                        if (input.charCodeAt(pos.offset) === 4361) {
                                                                                                                                                                                                                                                                                                          result0 = "\u1109";
                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                            matchFailed("\"\\u1109\"");
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                          if (/^[\u110B-\u110C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                              matchFailed("[\\u110B-\\u110C]");
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                            if (/^[\u110E-\u1112]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                matchFailed("[\\u110E-\\u1112]");
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                              if (input.charCodeAt(pos.offset) === 4412) {
                                                                                                                                                                                                                                                                                                                result0 = "\u113C";
                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                  matchFailed("\"\\u113C\"");
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 4414) {
                                                                                                                                                                                                                                                                                                                  result0 = "\u113E";
                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                    matchFailed("\"\\u113E\"");
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 4416) {
                                                                                                                                                                                                                                                                                                                    result0 = "\u1140";
                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                      matchFailed("\"\\u1140\"");
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 4428) {
                                                                                                                                                                                                                                                                                                                      result0 = "\u114C";
                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                        matchFailed("\"\\u114C\"");
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                      if (input.charCodeAt(pos.offset) === 4430) {
                                                                                                                                                                                                                                                                                                                        result0 = "\u114E";
                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                          matchFailed("\"\\u114E\"");
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                        if (input.charCodeAt(pos.offset) === 4432) {
                                                                                                                                                                                                                                                                                                                          result0 = "\u1150";
                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                            matchFailed("\"\\u1150\"");
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                          if (/^[\u1154-\u1155]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                              matchFailed("[\\u1154-\\u1155]");
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 4441) {
                                                                                                                                                                                                                                                                                                                              result0 = "\u1159";
                                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                matchFailed("\"\\u1159\"");
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                                              if (/^[\u115F-\u1161]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                  matchFailed("[\\u115F-\\u1161]");
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 4451) {
                                                                                                                                                                                                                                                                                                                                  result0 = "\u1163";
                                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                    matchFailed("\"\\u1163\"");
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 4453) {
                                                                                                                                                                                                                                                                                                                                    result0 = "\u1165";
                                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                      matchFailed("\"\\u1165\"");
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 4455) {
                                                                                                                                                                                                                                                                                                                                      result0 = "\u1167";
                                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                        matchFailed("\"\\u1167\"");
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                      if (input.charCodeAt(pos.offset) === 4457) {
                                                                                                                                                                                                                                                                                                                                        result0 = "\u1169";
                                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                          matchFailed("\"\\u1169\"");
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                        if (/^[\u116D-\u116E]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                            matchFailed("[\\u116D-\\u116E]");
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                          if (/^[\u1172-\u1173]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                              matchFailed("[\\u1172-\\u1173]");
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 4469) {
                                                                                                                                                                                                                                                                                                                                              result0 = "\u1175";
                                                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                matchFailed("\"\\u1175\"");
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                              if (input.charCodeAt(pos.offset) === 4510) {
                                                                                                                                                                                                                                                                                                                                                result0 = "\u119E";
                                                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                  matchFailed("\"\\u119E\"");
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 4520) {
                                                                                                                                                                                                                                                                                                                                                  result0 = "\u11A8";
                                                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                    matchFailed("\"\\u11A8\"");
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 4523) {
                                                                                                                                                                                                                                                                                                                                                    result0 = "\u11AB";
                                                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                      matchFailed("\"\\u11AB\"");
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                    if (/^[\u11AE-\u11AF]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                        matchFailed("[\\u11AE-\\u11AF]");
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                      if (/^[\u11B7-\u11B8]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                          matchFailed("[\\u11B7-\\u11B8]");
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                        if (input.charCodeAt(pos.offset) === 4538) {
                                                                                                                                                                                                                                                                                                                                                          result0 = "\u11BA";
                                                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                            matchFailed("\"\\u11BA\"");
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                          if (/^[\u11BC-\u11C2]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                              matchFailed("[\\u11BC-\\u11C2]");
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 4587) {
                                                                                                                                                                                                                                                                                                                                                              result0 = "\u11EB";
                                                                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                matchFailed("\"\\u11EB\"");
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                              if (input.charCodeAt(pos.offset) === 4592) {
                                                                                                                                                                                                                                                                                                                                                                result0 = "\u11F0";
                                                                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                  matchFailed("\"\\u11F0\"");
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 4601) {
                                                                                                                                                                                                                                                                                                                                                                  result0 = "\u11F9";
                                                                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                    matchFailed("\"\\u11F9\"");
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                  if (/^[\u1E00-\u1E9B]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                      matchFailed("[\\u1E00-\\u1E9B]");
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                    if (/^[\u1EA0-\u1EF9]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                        matchFailed("[\\u1EA0-\\u1EF9]");
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                      if (/^[\u1F00-\u1F15]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                          matchFailed("[\\u1F00-\\u1F15]");
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                        if (/^[\u1F18-\u1F1D]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                            matchFailed("[\\u1F18-\\u1F1D]");
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                          if (/^[\u1F20-\u1F45]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                              matchFailed("[\\u1F20-\\u1F45]");
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                            if (/^[\u1F48-\u1F4D]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                              result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                matchFailed("[\\u1F48-\\u1F4D]");
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                              if (/^[\u1F50-\u1F57]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                  matchFailed("[\\u1F50-\\u1F57]");
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 8025) {
                                                                                                                                                                                                                                                                                                                                                                                  result0 = "\u1F59";
                                                                                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                    matchFailed("\"\\u1F59\"");
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                  if (input.charCodeAt(pos.offset) === 8027) {
                                                                                                                                                                                                                                                                                                                                                                                    result0 = "\u1F5B";
                                                                                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                      matchFailed("\"\\u1F5B\"");
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                    if (input.charCodeAt(pos.offset) === 8029) {
                                                                                                                                                                                                                                                                                                                                                                                      result0 = "\u1F5D";
                                                                                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                        matchFailed("\"\\u1F5D\"");
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                      if (/^[\u1F5F-\u1F7D]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                          matchFailed("[\\u1F5F-\\u1F7D]");
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                        if (/^[\u1F80-\u1FB4]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                            matchFailed("[\\u1F80-\\u1FB4]");
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                          if (/^[\u1FB6-\u1FBC]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                              matchFailed("[\\u1FB6-\\u1FBC]");
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 8126) {
                                                                                                                                                                                                                                                                                                                                                                                              result0 = "\u1FBE";
                                                                                                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                matchFailed("\"\\u1FBE\"");
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                              if (/^[\u1FC2-\u1FC4]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                  matchFailed("[\\u1FC2-\\u1FC4]");
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                if (/^[\u1FC6-\u1FCC]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                  result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                    matchFailed("[\\u1FC6-\\u1FCC]");
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                  if (/^[\u1FD0-\u1FD3]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                      matchFailed("[\\u1FD0-\\u1FD3]");
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                    if (/^[\u1FD6-\u1FDB]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                        matchFailed("[\\u1FD6-\\u1FDB]");
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                      if (/^[\u1FE0-\u1FEC]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                          matchFailed("[\\u1FE0-\\u1FEC]");
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                        if (/^[\u1FF2-\u1FF4]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                            matchFailed("[\\u1FF2-\\u1FF4]");
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                          if (/^[\u1FF6-\u1FFC]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                              matchFailed("[\\u1FF6-\\u1FFC]");
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                          if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                            if (input.charCodeAt(pos.offset) === 8486) {
                                                                                                                                                                                                                                                                                                                                                                                                              result0 = "\u2126";
                                                                                                                                                                                                                                                                                                                                                                                                              advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                            } else {
                                                                                                                                                                                                                                                                                                                                                                                                              result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                              if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                matchFailed("\"\\u2126\"");
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                              if (/^[\u212A-\u212B]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                                result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                                advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                              } else {
                                                                                                                                                                                                                                                                                                                                                                                                                result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                  matchFailed("[\\u212A-\\u212B]");
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                              if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                                if (input.charCodeAt(pos.offset) === 8494) {
                                                                                                                                                                                                                                                                                                                                                                                                                  result0 = "\u212E";
                                                                                                                                                                                                                                                                                                                                                                                                                  advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                                } else {
                                                                                                                                                                                                                                                                                                                                                                                                                  result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                  if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                    matchFailed("\"\\u212E\"");
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                                  if (/^[\u2180-\u2182]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                                    result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                                    advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                                  } else {
                                                                                                                                                                                                                                                                                                                                                                                                                    result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                    if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                      matchFailed("[\\u2180-\\u2182]");
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                  if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                                    if (/^[\u3041-\u3094]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                                      result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                                      advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                                    } else {
                                                                                                                                                                                                                                                                                                                                                                                                                      result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                      if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                        matchFailed("[\\u3041-\\u3094]");
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                                      if (/^[\u30A1-\u30FA]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                                        result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                                        advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                                      } else {
                                                                                                                                                                                                                                                                                                                                                                                                                        result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                        if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                          matchFailed("[\\u30A1-\\u30FA]");
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                      if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                                        if (/^[\u3105-\u312C]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                                          result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                                          advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                                        } else {
                                                                                                                                                                                                                                                                                                                                                                                                                          result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                          if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                            matchFailed("[\\u3105-\\u312C]");
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        if (result0 === null) {
                                                                                                                                                                                                                                                                                                                                                                                                                          if (/^[\uAC00-\uD8A3]/.test(input.charAt(pos.offset))) {
                                                                                                                                                                                                                                                                                                                                                                                                                            result0 = input.charAt(pos.offset);
                                                                                                                                                                                                                                                                                                                                                                                                                            advance(pos, 1);
                                                                                                                                                                                                                                                                                                                                                                                                                          } else {
                                                                                                                                                                                                                                                                                                                                                                                                                            result0 = null;
                                                                                                                                                                                                                                                                                                                                                                                                                            if (reportFailures === 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                              matchFailed("[\\uAC00-\\uD8A3]");
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_S() {
        var cacheKey = "S@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1;
        
        if (input.charCodeAt(pos.offset) === 32) {
          result1 = " ";
          advance(pos, 1);
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("\" \"");
          }
        }
        if (result1 === null) {
          if (input.charCodeAt(pos.offset) === 9) {
            result1 = "\t";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\t\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 13) {
              result1 = "\r";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos.offset) === 10) {
                result1 = "\n";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\n\"");
                }
              }
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.charCodeAt(pos.offset) === 32) {
              result1 = " ";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\" \"");
              }
            }
            if (result1 === null) {
              if (input.charCodeAt(pos.offset) === 9) {
                result1 = "\t";
                advance(pos, 1);
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\t\"");
                }
              }
              if (result1 === null) {
                if (input.charCodeAt(pos.offset) === 13) {
                  result1 = "\r";
                  advance(pos, 1);
                } else {
                  result1 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\r\"");
                  }
                }
                if (result1 === null) {
                  if (input.charCodeAt(pos.offset) === 10) {
                    result1 = "\n";
                    advance(pos, 1);
                  } else {
                    result1 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\n\"");
                    }
                  }
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_XmlPattern() {
        var cacheKey = "XmlPattern@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_ElemPattern();
        if (result0 !== null) {
          result0 = (function(offset, line, column) {return {type:"XmlPattern"};})(pos0.offset, pos0.line, pos0.column);
        }
        if (result0 === null) {
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ElemPattern() {
        var cacheKey = "ElemPattern@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        result0 = parse_EmptyElemTagP();
        if (result0 === null) {
          pos0 = clone(pos);
          result0 = parse_STagP();
          if (result0 !== null) {
            result1 = parse_ContentP();
            if (result1 !== null) {
              result2 = parse_ETagP();
              if (result2 !== null) {
                result0 = [result0, result1, result2];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_EmptyElemTagP() {
        var cacheKey = "EmptyElemTagP@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = parse_S();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.substr(pos.offset, 2) === "/>") {
                result3 = "/>";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"/>\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_STagP() {
        var cacheKey = "STagP@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        if (input.charCodeAt(pos.offset) === 60) {
          result0 = "<";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = parse_S();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 62) {
                result3 = ">";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ETagP() {
        var cacheKey = "ETagP@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "</") {
          result0 = "</";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"</\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result2 = parse_S();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.charCodeAt(pos.offset) === 62) {
                result3 = ">";
                advance(pos, 1);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ContentP() {
        var cacheKey = "ContentP@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = clone(pos);
        result0 = parse_CharData();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          pos1 = clone(pos);
          result2 = parse_ElemPattern();
          if (result2 === null) {
            result2 = parse_ScalaPatterns();
          }
          if (result2 !== null) {
            result3 = parse_CharData();
            result3 = result3 !== null ? result3 : "";
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          } else {
            result2 = null;
            pos = clone(pos1);
          }
          while (result2 !== null) {
            result1.push(result2);
            pos1 = clone(pos);
            result2 = parse_ElemPattern();
            if (result2 === null) {
              result2 = parse_ScalaPatterns();
            }
            if (result2 !== null) {
              result3 = parse_CharData();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_ScalaPatterns() {
        var cacheKey = "ScalaPatterns@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_OPBRACE();
        if (result0 !== null) {
          result1 = parse_Patterns();
          if (result1 !== null) {
            result2 = parse_CLBRACE();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CDSect() {
        var cacheKey = "CDSect@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0;
        
        pos0 = clone(pos);
        result0 = parse_CDStart();
        if (result0 !== null) {
          result1 = parse_CData();
          if (result1 !== null) {
            result2 = parse_CDEnd();
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CDStart() {
        var cacheKey = "CDStart@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 9) === "<![CDATA[") {
          result0 = "<![CDATA[";
          advance(pos, 9);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<![CDATA[\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CData() {
        var cacheKey = "CData@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        pos2 = clone(pos);
        result0 = [];
        result1 = parse_Char();
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_Char();
        }
        if (result0 !== null) {
          if (input.substr(pos.offset, 3) === "]]>") {
            result1 = "]]>";
            advance(pos, 3);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"]]>\"");
            }
          }
          if (result1 !== null) {
            result2 = [];
            result3 = parse_Char();
            while (result3 !== null) {
              result2.push(result3);
              result3 = parse_Char();
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = [];
          result2 = parse_Char();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_Char();
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_CDEnd() {
        var cacheKey = "CDEnd@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0;
        
        if (input.substr(pos.offset, 3) === "]]>") {
          result0 = "]]>";
          advance(pos, 3);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"]]>\"");
          }
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PI() {
        var cacheKey = "PI@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2, result3, result4, result5, result6;
        var pos0, pos1, pos2, pos3, pos4;
        
        pos0 = clone(pos);
        if (input.substr(pos.offset, 2) === "<?") {
          result0 = "<?";
          advance(pos, 2);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<?\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_PITarget();
          if (result1 !== null) {
            pos1 = clone(pos);
            result2 = parse_S();
            if (result2 !== null) {
              pos2 = clone(pos);
              pos3 = clone(pos);
              reportFailures++;
              pos4 = clone(pos);
              result3 = [];
              result4 = parse_Char();
              while (result4 !== null) {
                result3.push(result4);
                result4 = parse_Char();
              }
              if (result3 !== null) {
                if (input.substr(pos.offset, 2) === "?>") {
                  result4 = "?>";
                  advance(pos, 2);
                } else {
                  result4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"?>\"");
                  }
                }
                if (result4 !== null) {
                  result5 = [];
                  result6 = parse_Char();
                  while (result6 !== null) {
                    result5.push(result6);
                    result6 = parse_Char();
                  }
                  if (result5 !== null) {
                    result3 = [result3, result4, result5];
                  } else {
                    result3 = null;
                    pos = clone(pos4);
                  }
                } else {
                  result3 = null;
                  pos = clone(pos4);
                }
              } else {
                result3 = null;
                pos = clone(pos4);
              }
              reportFailures--;
              if (result3 === null) {
                result3 = "";
              } else {
                result3 = null;
                pos = clone(pos3);
              }
              if (result3 !== null) {
                result4 = [];
                result5 = parse_Char();
                while (result5 !== null) {
                  result4.push(result5);
                  result5 = parse_Char();
                }
                if (result4 !== null) {
                  result3 = [result3, result4];
                } else {
                  result3 = null;
                  pos = clone(pos2);
                }
              } else {
                result3 = null;
                pos = clone(pos2);
              }
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = clone(pos1);
              }
            } else {
              result2 = null;
              pos = clone(pos1);
            }
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              if (input.substr(pos.offset, 2) === "?>") {
                result3 = "?>";
                advance(pos, 2);
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"?>\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = clone(pos0);
              }
            } else {
              result0 = null;
              pos = clone(pos0);
            }
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      function parse_PITarget() {
        var cacheKey = "PITarget@" + pos.offset;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = clone(cachedResult.nextPos);
          return cachedResult.result;
        }
        
        var result0, result1, result2;
        var pos0, pos1, pos2;
        
        pos0 = clone(pos);
        pos1 = clone(pos);
        reportFailures++;
        pos2 = clone(pos);
        if (input.charCodeAt(pos.offset) === 88) {
          result0 = "X";
          advance(pos, 1);
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"X\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos.offset) === 120) {
            result0 = "x";
            advance(pos, 1);
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"x\"");
            }
          }
        }
        if (result0 !== null) {
          if (input.charCodeAt(pos.offset) === 77) {
            result1 = "M";
            advance(pos, 1);
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"M\"");
            }
          }
          if (result1 === null) {
            if (input.charCodeAt(pos.offset) === 109) {
              result1 = "m";
              advance(pos, 1);
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("\"m\"");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos.offset) === 76) {
              result2 = "L";
              advance(pos, 1);
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"L\"");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos.offset) === 108) {
                result2 = "l";
                advance(pos, 1);
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"l\"");
                }
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = clone(pos2);
            }
          } else {
            result0 = null;
            pos = clone(pos2);
          }
        } else {
          result0 = null;
          pos = clone(pos2);
        }
        reportFailures--;
        if (result0 === null) {
          result0 = "";
        } else {
          result0 = null;
          pos = clone(pos1);
        }
        if (result0 !== null) {
          result1 = parse_Name();
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = clone(pos0);
          }
        } else {
          result0 = null;
          pos = clone(pos0);
        }
        
        cache[cacheKey] = {
          nextPos: clone(pos),
          result:  result0
        };
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
      
      	//引数をフィルターして適切な形に変形する
      	//もしidxが入っていればarg[idx]を戻り値とする
      	function ftr(arg, idx){
      		//空文字列はnull
      		if(typeof idx === 'undefined') idx = -1;
      		if(arg === "") return null;
      		return idx == -1? arg : arg[idx];
      	}
      
      	//keyをキーワードとする
      	function makeKeyword(key){
      		return {type:"Keyword", word:key};
      	}
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos.offset === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos.offset < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos.offset === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos.offset !== input.length) {
        var offset = Math.max(pos.offset, rightmostFailuresPos.offset);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = pos.offset > rightmostFailuresPos.offset ? pos : rightmostFailuresPos;
        
if(offset < input.length){
var range = 10;
var lines = input.substr(0, offset).split("\n").length-1
console.log("\n!!Error occurs");
console.log("------------------------")
console.log(input.substr(Math.max(0, offset - range), Math.min(input.length - offset, 2*range)));
console.log("------------------------" + "(around " + lines + " line.)\n");
}
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
