(begin (define-syntax Decl-Macro (syntax-rules () ((_ ("Scala" "Paren" (V-base  V-miss  V-tp))) (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "TupleExpression" ("Scala" "Exprs" (("Scala" "AnonymousFunction" (lambda (V-f) (#\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "BlockExpression" ("Scala" "Block" (letrec* ((V-tb ((type TypeDefinition) (#\nul) V-tp (#\nul #\nul))) (V-d ((val variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (V-tb)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 3 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul #\nul))) (V-doIt ((lambda (V-doIt V-d R-Int-) (function Procedure) (#\nul #\nul) ("Scala" "FunctionSignature" V-doIt #\nul ("Scala" "ParamClauses" (("Scala" "ParamClause" ("Scala" "Params" (("Scala" "Param" #\nul V-d ("Scala" "RepeatedParamType" ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul)) #\nul) #\nul))))) #\nul)) #\nul ("Scala" "Block" (letrec* ((V-a ((val variable) (#\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 3 #\nul) #\nul)) (V-+) (("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-d #\nul) #\nul)) #\nul #\nul))) #\nul) (#\nul #\nul)))) (#\nul ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-println ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-a #\nul) #\nul)) #\nul #\nul) #\nul)))) #\nul)) #\nul)) #\nul #\nul) #\nul)) #\nul)))))) (#\nul #\nul #\nul ("Scala" "IfStatement" ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-f #\nul) #\nul)) #\nul #\nul) #\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-base #\nul) #\nul)) #\nul #\nul) #\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-doIt ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-d #\nul) #\nul)) #\nul #\nul) #\nul)))) #\nul)) #\nul)) #\nul #\nul) #\nul))) #\nul)))) #\nul #\nul) #\nul))))) ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-base #\nul) #\nul)) #\nul #\nul) #\nul)))) #\nul)) #\nul)) #\nul #\nul) #\nul))))) ("Scala" "TopStat" #\nul #\nul ("Scala" "ObjectTemplateDefinition" #\nul ("Scala" "ObjectDefinition" V-Append1 ("Scala" "ClassTemplateOpt" #\nul ("Scala" "TemplateBody" (letrec* ((V-ta ((type TypeDeclaration) (#\nul #\nul #\nul) #\nul (#\nul #\nul))) (V-tb ((type TypeDeclaration) (#\nul #\nul #\nul) #\nul (#\nul (("Scala" "AccessModifier" ("Scala" "Keyword" "private ") #\nul))))) (V-t ((val variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) #\nul (#\nul #\nul))) (V-g ((val variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) #\nul (#\nul (("Scala" "AccessModifier" ("Scala" "Keyword" "private ") #\nul))))) (V-w ((var variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) #\nul (#\nul #\nul))) (V-q ((var variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) #\nul (#\nul (("Scala" "AccessModifier" ("Scala" "Keyword" "private ") #\nul))))) (V-c ((val variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 10 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul #\nul))) (V-a ((val variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 3 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul (("Scala" "AccessModifier" ("Scala" "Keyword" "private ") #\nul))))) (V-d ((var variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 10 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul #\nul))) (V-b ((var variable) (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 10 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul (("Scala" "AccessModifier" ("Scala" "Keyword" "private ") #\nul))))) (V-doIt ((lambda (V-doIt) (function Procedure) (#\nul (("Scala" "Keyword" "lazy "))) ("Scala" "FunctionSignature" V-doIt #\nul ("Scala" "ParamClauses" (("Scala" "ParamClause" #\nul)) #\nul)) #\nul ("Scala" "Block" (letrec* () (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-println ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 3 #\nul) #\nul)) #\nul #\nul) #\nul)))) #\nul)) #\nul)) #\nul #\nul) #\nul)) #\nul))))) (R-main- ((lambda (R-main- R-args- R-Array- R-String-) (function FunctionDefinition) (#\nul (("Scala" "Keyword" "sealed "))) ("Scala" "FunctionSignature" R-main- #\nul ("Scala" "ParamClauses" (("Scala" "ParamClause" ("Scala" "Params" (("Scala" "Param" #\nul R-args- ("Scala" "RepeatedParamType" ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Array-)) (("Scala" "TypeArgs" ("Scala" "Types" (("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-String-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))))))) #\nul) #\nul #\nul) #\nul #\nul)) #\nul) #\nul))))) #\nul)) ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Unit-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul)) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "BlockExpression" ("Scala" "Block" (letrec* ((V-tb ((type TypeDefinition) (#\nul) ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul)) (#\nul #\nul))) (V-f ((type TypeDefinition) (#\nul) ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul)) (#\nul ("Scala" "Keyword" "implicit ")))) (V-b ((var variable) (#\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 1000 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul ("Scala" "Keyword" "lazy ")))) (V-c ((val variable) (#\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 1001 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul #\nul))) (V-d ((var variable) (#\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 1000 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul ("Scala" "Keyword" "lazy ")))) (V-r ((var variable) (#\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 1001 #\nul) #\nul)) #\nul #\nul) #\nul) (#\nul #\nul))) (V-doIt2 ((lambda (V-doIt2) (function Procedure) (#\nul ("Scala" "Keyword" "lazy ")) ("Scala" "FunctionSignature" V-doIt2 #\nul ("Scala" "ParamClauses" (("Scala" "ParamClause" #\nul)) #\nul)) #\nul ("Scala" "Block" (letrec* () (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-println ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 4 #\nul) #\nul)) #\nul #\nul) #\nul)))) #\nul)) #\nul)) #\nul #\nul) #\nul)) #\nul))))) (V-a ((val variable) (#\nul) (#\nul (Decl-Macro ("Scala" "Paren" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 10 #\nul) #\nul)) #\nul #\nul) #\nul)  V-f  ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (V-tb)) #\nul) #\nul) #\nul #\nul) #\nul #\nul))))) #\nul) (#\nul #\nul)))) (#\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-println ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-a #\nul) #\nul)) #\nul #\nul) #\nul)))) #\nul)) #\nul)) #\nul #\nul) #\nul)) #\nul)))) #\nul #\nul) #\nul)))) (V-doIt2 ((lambda (V-doIt2) (function FunctionDeclaration) (#\nul (("Scala" "Keyword" "lazy "))) ("Scala" "FunctionSignature" V-doIt2 #\nul ("Scala" "ParamClauses" (("Scala" "ParamClause" #\nul)) #\nul)) ("Scala" "Type" #\nul ("Scala" "InfixType" ("Scala" "CompoundType" ("Scala" "AnnotType" ("Scala" "SimpleType" ("Scala" "StableId" (R-Int-)) #\nul) #\nul) #\nul #\nul) #\nul #\nul)) #\nul)))) #\nul (#\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul #\nul))))))) #\nul)
