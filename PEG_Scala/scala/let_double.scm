(begin (define-syntax Let-Macro (syntax-rules (V-=) ((_ ("Scala" "Paren" (V-id V-= V-e ("Scala" "PunctuationMark" ",") V-id2 V-= V-e2)) ("Scala" "Brace" (V-body))) (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "TupleExpression" ("Scala" "Exprs" (("Scala" "AnonymousFunction" ("Scala" "Bindings" (("Scala" "Binding" V-id #\nul) ("Scala" "Binding" V-id2 #\nul))) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-body ) #\nul))  ) #\nul)))) ("Scala" "FunctionApplicationPostfix" ("Scala" "ArgumentExpression" ("Scala" "Exprs" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-e ) #\nul))  ) #\nul) ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-e2 ) #\nul))  ) #\nul)))) )) #\nul))  ) #\nul))))) ("Scala" "AssignmentExpression" #\nul V-a (Let-Macro ("Scala" "Paren" (V-x V-= ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 3 ) #\nul))  ) #\nul) ("Scala" "PunctuationMark" ",") V-y V-= ("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "literalSimpleExpression" 10 ) #\nul))  ) #\nul))) ("Scala" "Brace" (("Scala" "PostfixExpression" ("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-x ) #\nul)) (("Scala" "Identifier" "*")) (("Scala" "InfixExpression" ("Scala" "PrefixExpression" #\nul ("Scala" "SimpleExpression" ("Scala" "idSeqSimpleExpression" V-y ) #\nul))  ))) #\nul))))))
