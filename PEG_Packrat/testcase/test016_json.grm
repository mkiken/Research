/* JSON parser based on the grammar described at http://json.org/. */

/* ===== Syntactical Elements ===== */

start
  = _ object

object
  = "{" _ "}" _
  / "{" _ members "}" _

members
  = pair ("," _ pair)*

pair
  = string ":" _ value

array
  = "[" _ "]" _
  / "[" _ elements "]" _

elements
  = value ("," _ value)*

value
  = string
  / number
  / object
  / array
  / "true" _
  / "false" _
  // FIXME: We can't return null here because that would mean parse failure.
  / "null" _

/* ===== Lexical Elements ===== */

string "string"
  = '"' '"' _
  / '"' chars '"' _

chars
  = char+

char
  // In the original JSON grammar: "any-Unicode-character-except-"-or-\-or-control-character"
  = [^"\\\0-\x1F\x7f]
  / '\\"'
  / "\\\\"
  / "\\/"
  / "\\b"
  / "\\f"
  / "\\n"
  / "\\r"
  / "\\t"
  / "\\u" hexDigit hexDigit hexDigit hexDigit

number "number"
  = int frac exp _
  / int frac _
  / int exp _
  / int _

int
  = digit19 digits
  / digit
  / "-" digit19 digits
  / "-" digit

frac
  = "." digits

exp
  = e digits

digits
  = digit+

e
  = [eE] [+-]?

/*
 * The following rules are not present in the original JSON gramar, but they are
 * assumed to exist implicitly.
 *
 * FIXME: Define them according to ECMA-262, 5th ed.
 */

digit
  = [0-9]

digit19
  = [1-9]

hexDigit
  = [0-9a-fA-F]

/* ===== Whitespace ===== */

_ "whitespace"
  = whitespace*

// Whitespace is undefined in the original JSON grammar, so I assume a simple
// conventional definition consistent with ECMA-262, 5th ed.
whitespace
  = [ \t\n\r]
